✅ PROMPT POUR L’AGENT REPLIT
0) Objectif & Contraintes

Construire une application Neighborhood Community Hub (portail privé pour quartiers / copro).

Frontend : Next.js 14 (App Router, TypeScript, React Server Components, ISR, Middleware).

Backend : Express.js (Node 20, TypeScript) séparé du front, lancé dans le même repo (monorepo “web” + “api”).

BD : MongoDB avec Mongoose (schémas stricts, indexes, migrations légères).

Temps réel : Socket.IO (rooms par communityId et userId).

Stockage médias : S3 (ou compatible) avec URLs signées.

Auth : JWT access + refresh via cookie httpOnly, RBAC (admin, moderator, resident).

Validation : Zod (front & back).

Tests : Jest + Supertest (API), Playwright (E2E web).

Observabilité : Pino (logs JSON), OpenTelemetry (traces), métriques simples.

Infra Dev : Docker Compose pour MongoDB/Redis (optionnel), scripts npm, ESLint + Prettier.

Langue : FR.

Si une info est manquante (ex : secrets S3), créer des placeholders et exposer comment les renseigner via .env.

1) Monorepo & Arborescence
1.1 Créer le monorepo

Racine avec deux dossiers : apps/web (Next.js) et apps/api (Express).

Fichier package.json racine avec scripts orchestrateurs :

dev: lance api puis web (concurrence).

build: build api puis web.

lint, test, typecheck.

1.2 Arborescence cible (résumé)
apps/
  api/
    src/
      server.ts
      config/
        env.ts
        logger.ts
        security.ts
      db/
        connection.ts
        models/ (User.ts, Community.ts, Post.ts, Comment.ts, Vote.ts, Report.ts, Notification.ts)
        migrations/ (ex: 2025_08_add_post_expiresAt.ts)
        seed/ (seed.ts)
      routes/
        auth.ts
        communities.ts
        posts.ts
        comments.ts
        votes.ts
        reports.ts
        moderation.ts
        uploads.ts
      services/
        auth.service.ts
        rbac.ts
        spam.ts
        notifications.ts
      ws/
        index.ts  (Socket.IO, rooms, events)
      middlewares/
        auth.ts
        rbacGuard.ts
        error.ts
        rateLimit.ts
      utils/
        idempotency.ts
        pagination.ts
    test/ (unit + integration)
    package.json, tsconfig.json
  web/
    app/
      (app router pages)
      layout.tsx
      page.tsx
      communities/[id]/
        page.tsx        (flux)
        post/[postId]/page.tsx
        create/page.tsx
        market/page.tsx
        poll/[postId]/page.tsx
        moderation/page.tsx
      profile/page.tsx
      api/ (routes Next si besoin de proxy interne)
      middleware.ts (JWT/roles)
    components/
      PostCard.tsx
      Composer.tsx
      CommentList.tsx
      PollWidget.tsx
      ReportButton.tsx
      ModerationPanel.tsx
      Uploader.tsx
      NotificationsBell.tsx
    lib/
      apiClient.ts (fetcher + cookies)
      socket.ts    (client Socket.IO, rooms)
      store.ts     (Zustand)
      zodSchemas.ts
      i18n.ts
    styles/
    tests-e2e/
    package.json, tsconfig.json
docker/
  docker-compose.dev.yml
.env.example

2) Dépendances
2.1 API (Express)

express, cors, helmet, cookie-parser, express-rate-limit

mongoose

zod

jsonwebtoken, bcryptjs

socket.io, socket.io-redis (adapter optionnel)

multer, @aws-sdk/client-s3, @aws-sdk/s3-request-presigner

pino, pino-http

Dev : typescript, ts-node-dev, jest, supertest, eslint, prettier

2.2 Web (Next.js)

next, react, react-dom

zustand, @tanstack/react-query

zod, react-hook-form

socket.io-client

next-i18next (ou simple i18n maison)

date-fns, clsx

Dev : typescript, playwright, eslint, prettier

3) Variables d’environnement (.env)

Communes

NODE_ENV=development

JWT_ACCESS_SECRET=...

JWT_REFRESH_SECRET=...

REFRESH_TOKEN_TTL_DAYS=30

CORS_ORIGINS=http://localhost:3000

API

PORT=8080

MONGODB_URI=mongodb://localhost:27017/communityhub

S3_ENDPOINT=... (optionnel si S3 compatible)

S3_REGION=...

S3_BUCKET=...

S3_ACCESS_KEY=...

S3_SECRET_KEY=...

SPAM_THRESHOLD=0.7

POST_MAX_LEN=8000

WEB

NEXT_PUBLIC_API_BASE_URL=http://localhost:8080

Créer apps/api/src/config/env.ts pour charger/valider ces variables (Zod).

4) Schémas MongoDB (Mongoose)
4.1 Users

email (unique, index), name, passwordHash, roles: ['admin'|'moderator'|'resident'], communityIds: ObjectId[], unitId?: ObjectId, timestamps.

4.2 Communities

name, address, settings (ex: post max len, media types), timestamps.

4.3 Posts

communityId (idx), authorId (idx),

type: 'announcement'|'service'|'market'|'poll' (idx),

title, body, tags[],

status: 'published'|'hidden' (idx),

meta: { price?: number, images?: string[], options?: string[] },

expiresAt?: Date (idx + TTL), timestamps.

Index texte { title: 'text', body: 'text' }.

4.4 Comments

postId (idx), authorId (idx), body, status, timestamps.

4.5 Votes

postId (idx), userId (idx), optionIndex, createdAt,

Index unique composé { postId: 1, userId: 1 }.

4.6 Reports

targetType: 'post'|'comment'|'user', targetId, reporterId, reason, status: 'open'|'closed', timestamps.

Index { status: 1, createdAt: -1 }.

4.7 Notifications

userId (idx), type, payload, readAt?, timestamps.

Créer apps/api/src/db/models/*.ts avec ces schémas + indexes + toJSON() propre.

5) RBAC & Auth
5.1 Rôles

admin : gestion communauté, modération globale.

moderator : masquer/supprimer contenus, traiter reports.

resident : CRUD posts/commentaires, voter.

5.2 JWT & Refresh

POST /auth/login → access + refresh (refresh en cookie httpOnly SameSite=Lax).

POST /auth/refresh → renouvelle access.

POST /auth/logout → invalide refresh (liste noire en mémoire/Redis simple TTL).

5.3 Middleware

auth.ts : vérifie access token → req.user.

rbacGuard.ts(…allowedRoles) : 403 si role non autorisé.

Next middleware (apps/web/app/middleware.ts) : protège routes SSR en vérifiant cookie d’access et redirige /login si absent/insuffisant.

6) API Contract (Express)
6.1 Règles globales

Pagination cursor: ?cursor=<ISO or ObjectId>&limit=20.

Filtres: type, q (texte), tags.

Idempotence: sur POST /reports, POST /posts/:id/votes (header Idempotency-Key).

Rate limiting: 100 req/min IP (public), 500 req/min JWT (privé).

CORS: contrôlé via CORS_ORIGINS.

6.2 Endpoints (minimum viable + erreurs)

POST /auth/login { email, password } → { accessToken } | 401

POST /auth/refresh (cookie) → { accessToken } | 401

POST /auth/logout → 204

GET /communities/:id/posts?type=&q=&cursor= → { items[], nextCursor }

POST /posts { communityId, type, title, body, meta? } → { post } (roles: resident+)

POST /posts/:id/comments { body } → { comment } (resident+)

POST /posts/:id/votes { optionIndex } → { tally } (resident+)

POST /reports { targetType, targetId, reason } → { report } (resident+)

POST /moderation/:id/hide → { post } (moderator+)

POST /moderation/:id/resolve → { report } (moderator+)

POST /uploads/sign { contentType, filename } → { url, fields } (presign S3) (auth)

6.3 WebSocket (Socket.IO)

Rooms

community:{communityId}

post:{postId}

user:{userId}

Événements

post.created (srv→community) {post}

comment.created (srv→post) {comment}

poll.tally (srv→community/post) {postId, counts[]}

report.opened (srv→moderators) {report}

notification (srv→user) {type, payload}

7) Anti-Spam & Modération
7.1 Pipeline heuristique (services/spam.ts)

Score ∈ [0,1] basé sur :

fréquence messages (throttling),

ratio liens/texte,

répétition n-grammes,

longueur extrême,

blocklist domaines.

Si score ≥ SPAM_THRESHOLD → status='hidden' + envoi file de modération.

7.2 Modération

Écran “Moderation” (Next) : liste triable (status=open, score desc, ancienneté).

Actions : Hide/Unhide, Resolve report, Ban soft (shadow ban → visible auteur uniquement).

Audit log en base (userId, action, cible, horodatage).

8) Frontend (Next.js)
8.1 Pages & UX

/ : redirection selon session.

/communities/[id] : Flux filtrable (type, q, tags) + live post.created.

/communities/[id]/create : Composer (validation Zod, images S3 via presign).

/communities/[id]/post/[postId] : Détail + commentaires live.

/communities/[id]/market : Buy/Sell (grille cartes avec images).

/communities/[id]/poll/[postId] : Widget sondage + live poll.tally.

/communities/[id]/moderation : file modération (moderator/admin).

/profile : préférences, notifs.

/login : authentification.

8.2 Composants

PostCard, Composer, CommentList, PollWidget, ReportButton, ModerationPanel, Uploader, NotificationsBell.

State : React Query pour data fetching; Zustand pour filtres/UX; socket.io-client branché sur rooms.

A11y/i18n : focus visible, ARIA, i18n FR/EN; thème clair/sombre CSS vars.

9) Temps réel — Diagrammes
9.1 Composants (Mermaid)
flowchart LR
  WEB[Next.js Front] -- REST/HTTPS --> API[Express API]
  WEB <-- Socket.IO --> RT[WS Gateway (Socket.IO)]
  API -- Mongoose --> MDB[(MongoDB)]
  API -- S3 presign --> S3[(Object Storage)]
  API <--> AUTH[JWT/Refresh/RBAC]
  API -- Logs/Traces --> OBS[Observabilité]
  RT <--> API

9.2 Séquence vote sondage (Mermaid)
sequenceDiagram
  participant U as Front (Résident)
  participant API as Express
  participant DB as MongoDB
  participant RT as Socket.IO
  U->>API: POST /posts/:id/votes {optionIndex}
  API->>DB: upsert Vote (unique postId+userId)
  DB-->>API: ok
  API->>DB: aggregate tally
  API-->>RT: emit poll.tally {postId, counts[]}
  RT-->>U: poll.tally (broadcast à la communauté/post)

10) Sécurité

HTTPS obligatoire, CORS whitelist.

Helmet (CSP stricte, no inline).

JWT access (15 min) + refresh (30 j) httpOnly.

Bruteforce login limiter, rate limit global.

Validation Zod front & back (fail fast).

Sanitization de la recherche (pas d’injection RegExp).

Uploads : uniquement via presigned URL S3, tailles/mimes contrôlés.

PII : minimiser, pas de données sensibles dans logs, masking.

11) Observabilité & Qualité

Logs Pino (corrélation x-request-id).

Métriques : latence P95, erreurs/route, ws connections, temps “post.created → client”.

Traces : OpenTelemetry (API→Mongo).

Tests critiques :

Un utilisateur ne peut voter qu’une fois (unique {postId,userId}).

403 si non-membre tente d’accéder à une communauté privée.

Auto-hide si score spam > seuil.

Événement post.created reçu par membres.

Pagination cursor robuste (insertions concurrentes).

12) Migrations & Seed

Seed (db/seed/seed.ts) : créer une communauté de démo, un admin, 5 residents, 10 posts variés (announcement/service/market/poll).

Migration exemple : ajouter expiresAt à posts + index TTL, backfill (mettre null par défaut).

Collection migrations : garder l’historique { name, appliedAt }.

13) Docker Compose (dev)

Créer docker/docker-compose.dev.yml :

mongo (port 27017)

redis (optionnel pour adapter Socket.IO)

(web et api tournent dans Replit, pas nécessaire en conteneur pour dev)

14) Scripts NPM (racine)

dev: concurrently "npm:dev:api" "npm:dev:web"

dev:api: ts-node-dev apps/api/src/server.ts

dev:web: next dev -p 3000 -w apps/web

build: npm --prefix apps/api run build && npm --prefix apps/web run build

test: npm -w apps/api test && npm -w apps/web test:e2e

15) Acceptation (MVP prêt)

Connexion / refresh / logout fonctionnels (JWT + cookies).

Créer/lire posts par communauté, commentaires, votes, reports.

Sockets : post.created, comment.created, poll.tally, notification.

Anti-spam : messages suspects mis en hidden + visible en modération.

Upload image d’annonce “market” via presign S3.

Next.js SSR du flux et des détails post (SEO + perfs).

Tests critiques verts, lint OK.

16) Tâches étape-par-étape (checklist pour l’agent)

Init monorepo + TS + ESLint + Prettier.

API : Express, Pino, cors/helmet, error handler.

Mongo : connexion, schémas Mongoose + indexes + seed.

Auth : routes login/refresh/logout, JWT, middleware auth, rbacGuard.

Communities/Posts/Comments/Votes/Reports : routes + services + validations Zod + pagination cursor.

Socket.IO : serveur, rooms, événements, hooks dans services.

Uploads : endpoint presign S3, composant Next Uploader (PUT direct).

Anti-spam : pipeline scoring + auto-hide + file modération.

Frontend Next : App Router, pages, data-fetching (React Query), store Zustand, client Socket.IO.

Middleware Next : protection des routes communities/moderation.

Tests : Jest/Supertest (API), Playwright (E2E login → créer post → voir WS).

Observabilité : métriques de base, logs corrélés, traces OTEL no-op (stub).

Docs : README avec commandes, variables, schémas.

17) Snippets indispensables à générer
17.1 Middleware RBAC (API)
export const rbacGuard = (...allowed: string[]) => (req, res, next) => {
  const role = req.user?.role;
  if (!role || !allowed.includes(role)) return res.status(403).json({ error: 'Forbidden' });
  next();
};

17.2 Pagination cursor (API)
export function buildCursorQuery(field = 'createdAt', cursor?: string) {
  return cursor ? { [field]: { $lt: new Date(cursor) } } : {};
}

17.3 Client Socket (Next)
import { io, Socket } from 'socket.io-client';
let socket: Socket | null = null;
export function getSocket(token: string) {
  if (!socket) {
    socket = io(process.env.NEXT_PUBLIC_API_BASE_URL!, {
      transports: ['websocket'],
      auth: { token }
    });
  }
  return socket;
}

17.4 Presign S3 (API)
import { S3Client, PutObjectCommand } from '@aws-sdk/client-s3';
import { getSignedUrl } from '@aws-sdk/s3-request-presigner';
export async function presign(key: string, contentType: string) {
  const client = new S3Client({ region: process.env.S3_REGION, endpoint: process.env.S3_ENDPOINT, credentials:{ accessKeyId: process.env.S3_ACCESS_KEY!, secretAccessKey: process.env.S3_SECRET_KEY! }});
  const cmd = new PutObjectCommand({ Bucket: process.env.S3_BUCKET!, Key: key, ContentType: contentType });
  return getSignedUrl(client, cmd, { expiresIn: 300 });
}

18) Suggestions avancées & innovantes (à intégrer si temps)

Recommandations & qualité de flux

Score de pertinence par post (récence × interaction × réputation auteur).

Fil “Top” vs “Récent” par communauté.

Réputation & badges

Points pour posts utiles / réponses acceptées / signalements valides.

Badges : “Voisin serviable”, “Modérateur de confiance”.

Summaries automatiques

Générer un digest quotidien par communauté (posts majeurs, sondages en cours).

Résumé par post long (TL;DR).

Recherche sémantique locale

Stocker embeddings (lib locale) et fournir recherche “naturelle” en plus du full-text.

Système d’alias & anonymat contrôlé

Pour sondages sensibles : option vote anonyme (mais anti-fraude par unique {postId,userId}).

Mode PWA & offline

Cache des derniers posts + file d’outbox pour publier dès que réseau revient.

Anti-abus renforcé

Détection d’onde de spam (burst) + blocage temporaire.

“Shadow ban” progressif (visibilité dégradée sans feedback).

Rôles granulaires

building-moderator pour un immeuble précis.

Permissions par portée (communityId/buildingId).

Économie locale (optionnel)

Marketplace avec prix estimé (bornes auto) et checklist sécurité pour échanges IRL.

Accessibilité & inclusion

Police adaptable, contraste élevé, traduction automatique de posts (FR/EN).

19) Critères d’acceptation finaux (Done Definition)

Lancer npm run dev → API sur :8080, Web sur :3000.

Login fonctionne, flux s’affiche, création de post OK, image uploadée via presign.

Commentaire et vote → événements WS reçus instantanément par autres clients.

Modérateur peut masquer un post, le flux se met à jour en direct.

Tests clés verts (API + E2E).

Logs structurés visibles, métriques simples exposées.

Fin du prompt.
Merci de générer tout le code, la configuration, et les scripts pour que le projet soit exécutable immédiatement en local avec les fichiers et dossiers décrits ci-dessus. Utilise des placeholders pour les secrets S3 et documente leur remplissage.