{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Community Hub Application\n\n## Overview\n\nThis is a comprehensive neighborhood community hub application designed as a private portal for residential communities and apartment buildings. The system provides residents with a centralized platform to share announcements, engage in discussions, conduct polls, and participate in marketplace activities.\n\nThe application follows a modern full-stack architecture with a React-based frontend and Express.js backend. Currently transitioning from MongoDB to PostgreSQL with Drizzle ORM for better Replit integration. The system implements role-based access control (RBAC) with three user types: residents, moderators, and administrators.\n\n## Recent Changes (August 2025)\n\n- ✓ Migrated from MongoDB to PostgreSQL for Replit compatibility\n- ✓ Set up JWT authentication with environment secrets\n- ✓ Fixed rate limiting IPv6 compatibility issues\n- → Working on resolving frontend TypeScript/JSX compilation errors\n- → Simplifying application structure for initial deployment\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe frontend is built using React with Vite as the build tool and follows a component-based architecture. Key architectural decisions include:\n\n- **Component Library**: Uses shadcn/ui components with Radix UI primitives for consistent, accessible UI components\n- **Styling**: TailwindCSS for utility-first styling with CSS custom properties for theming\n- **State Management**: Zustand for global state management with persistence for authentication state\n- **Data Fetching**: TanStack Query (React Query) for server state management and caching\n- **Form Management**: React Hook Form with Zod schema validation for type-safe form handling\n- **Routing**: Wouter for lightweight client-side routing\n\n### Backend Architecture\nThe backend follows a RESTful API architecture with Express.js:\n\n- **Framework**: Express.js with TypeScript for type safety\n- **Database**: MongoDB with Mongoose ODM for schema definition and data modeling\n- **Authentication**: JWT-based authentication with access/refresh token pattern using httpOnly cookies\n- **Authorization**: Role-based access control (RBAC) with permission-based guards\n- **Real-time Communication**: WebSocket implementation for live updates on posts, comments, and notifications\n- **File Uploads**: S3-compatible storage with pre-signed URLs for secure file handling\n\n### Database Design\nMongoDB collections are structured around core entities:\n\n- **Users**: Stores user profiles, roles, and community associations\n- **Communities**: Represents residential communities with configurable settings\n- **Posts**: Content creation with support for announcements, services, marketplace items, and polls\n- **Comments**: Threaded discussions on posts\n- **Votes**: Poll participation tracking\n- **Reports**: Content moderation system\n- **Notifications**: User notification management\n\n### Security & Middleware\nComprehensive security layer implementation:\n\n- **Rate Limiting**: Tiered rate limiting for different endpoint categories\n- **Input Validation**: Zod schemas for request/response validation\n- **Content Moderation**: Spam detection and reporting system\n- **CORS Configuration**: Environment-specific CORS policies\n- **Request Logging**: Structured logging with Pino for observability\n\n### Real-time Features\nWebSocket integration for live user experience:\n\n- **Live Updates**: Real-time post creation and comment notifications\n- **Poll Results**: Live poll tally updates\n- **User Presence**: Connection management with community-based rooms\n- **Notification System**: Instant delivery of user notifications\n\n## External Dependencies\n\n### Database\n- **MongoDB**: Primary database using Mongoose ODM for schema validation and data modeling\n- **Connection Management**: Automatic reconnection handling and error logging\n\n### Cloud Storage\n- **S3-Compatible Storage**: File upload handling with pre-signed URLs for security\n- **Configuration**: Environment-based configuration for different storage providers\n- **File Validation**: Type and size restrictions for uploaded content\n\n### Authentication Services\n- **JWT**: JSON Web Token implementation for stateless authentication\n- **bcryptjs**: Password hashing and verification\n- **Cookie Management**: Secure httpOnly cookie implementation for token storage\n\n### Real-time Communication\n- **Socket.IO**: WebSocket implementation for real-time features\n- **Room Management**: Community-based message routing\n- **Authentication Integration**: Token-based WebSocket authentication\n\n### Development & Build Tools\n- **Vite**: Frontend build tool with HMR and optimizations\n- **TypeScript**: Type safety across the entire application\n- **ESLint & Prettier**: Code quality and formatting standards\n- **Drizzle Kit**: Database migration management (configured for PostgreSQL but using MongoDB)\n\n### Monitoring & Logging\n- **Pino**: Structured JSON logging for production environments\n- **Development Logging**: Pretty-printed logs for development environment\n- **Error Handling**: Centralized error handling with appropriate HTTP status codes\n\n### UI & Styling\n- **Radix UI**: Accessible component primitives\n- **Tailwind CSS**: Utility-first CSS framework\n- **shadcn/ui**: Pre-built component library with consistent design patterns\n- **Lucide React**: Icon library for consistent iconography","size_bytes":5437},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n          50: \"var(--primary-50)\",\n          100: \"var(--primary-100)\",\n          500: \"var(--primary-500)\",\n          600: \"var(--primary-600)\",\n          700: \"var(--primary-700)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n          50: \"var(--secondary-50)\",\n          500: \"var(--secondary-500)\",\n          600: \"var(--secondary-600)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n          500: \"var(--accent-500)\",\n          600: \"var(--accent-600)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3125},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (process.env.NODE_ENV === \"development\" || process.env.NODE_ENV !== \"production\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2113},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport express from 'express';\nimport cors from 'cors';\nimport helmet from 'helmet';\nimport cookieParser from 'cookie-parser';\nimport bcrypt from 'bcryptjs';\n\n// Configuration\nimport { env } from './config/env';\nimport { logger } from './config/logger';\nimport { connectDatabase } from './config/database';\n\n// Models\nimport { UserModel } from './models/User';\nimport { CommunityModel } from './models/Community';\nimport { PostModel } from './models/Post';\nimport { CommentModel } from './models/Comment';\nimport { VoteModel } from './models/Vote';\nimport { ReportModel } from './models/Report';\nimport { NotificationModel } from './models/Notification';\n\n// Services\nimport { AuthService } from './services/auth.service';\nimport { RBACService } from './services/rbac';\nimport { SpamService } from './services/spam';\nimport { NotificationService } from './services/notifications';\nimport { UploadService } from './services/uploads';\n\n// Middleware\nimport { authMiddleware, optionalAuth, AuthRequest } from './middlewares/auth';\nimport { rbacGuard, permissionGuard } from './middlewares/rbacGuard';\nimport { errorHandler, notFoundHandler } from './middlewares/error';\nimport { generalRateLimit, authRateLimit, authenticatedRateLimit, postRateLimit } from './middlewares/rateLimit';\nimport { idempotencyMiddleware } from './utils/idempotency';\n\n// Utils\nimport { getPaginationParams, buildCursorQuery, buildPaginatedResponse } from './utils/pagination';\n\n// WebSocket\nimport { WebSocketService } from './ws';\n\n// Schemas\nimport { \n  insertUserSchema, \n  insertPostSchema, \n  insertCommentSchema, \n  insertVoteSchema, \n  insertReportSchema,\n  User\n} from '@shared/schema';\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Connect to database\n  await connectDatabase();\n\n  // Middleware setup\n  // Configure helmet with relaxed CSP for development, strict for production\n  const isDevelopment = process.env.NODE_ENV === 'development';\n  app.use(helmet({\n    contentSecurityPolicy: {\n      directives: {\n        defaultSrc: [\"'self'\"],\n        styleSrc: [\"'self'\", \"'unsafe-inline'\"],\n        scriptSrc: isDevelopment \n          ? [\"'self'\", \"'unsafe-inline'\", \"'unsafe-eval'\", \"http://localhost:*\", \"ws://localhost:*\"]\n          : [\"'self'\"],\n        imgSrc: [\"'self'\", \"data:\", \"https:\"],\n        connectSrc: isDevelopment \n          ? [\"'self'\", \"ws://localhost:*\", \"http://localhost:*\"]\n          : [\"'self'\"],\n      },\n    },\n  }));\n\n  app.use(cors({\n    origin: env.CORS_ORIGINS.split(','),\n    credentials: true,\n  }));\n\n  app.use(cookieParser());\n  app.use(generalRateLimit);\n\n  // Health check\n  app.get('/api/health', (req, res) => {\n    res.json({ status: 'ok', timestamp: new Date().toISOString() });\n  });\n\n  // Auth routes\n  app.post('/api/auth/register', authRateLimit, async (req, res, next) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n          // Check if user exists\n      const existingUser = await storage.getUserByEmail(userData.email);\n      if (existingUser) {\n        return res.status(409).json({ error: 'User already exists' });\n      }\n\n      // Create user\n      const user = await storage.createUser({\n        ...userData,\n        passwordHash: userData.password,\n      });\n      await user.save();\n\n      const userJson = user.toJSON() as User;\n      const accessToken = AuthService.generateAccessToken(userJson);\n      const refreshToken = AuthService.generateRefreshToken(userJson);\n\n      res.cookie('refreshToken', refreshToken, {\n        httpOnly: true,\n        secure: env.NODE_ENV === 'production',\n        sameSite: 'lax',\n        maxAge: env.REFRESH_TOKEN_TTL_DAYS * 24 * 60 * 60 * 1000,\n      });\n\n      res.status(201).json({ \n        user: userJson, \n        accessToken \n      });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.post('/api/auth/login', authRateLimit, async (req, res, next) => {\n    try {\n      const { email, password } = req.body;\n\n      const user = await AuthService.authenticateUser(email, password);\n      if (!user) {\n        return res.status(401).json({ error: 'Invalid credentials' });\n      }\n\n      const accessToken = AuthService.generateAccessToken(user);\n      const refreshToken = AuthService.generateRefreshToken(user);\n\n      res.cookie('refreshToken', refreshToken, {\n        httpOnly: true,\n        secure: env.NODE_ENV === 'production',\n        sameSite: 'lax',\n        maxAge: env.REFRESH_TOKEN_TTL_DAYS * 24 * 60 * 60 * 1000,\n      });\n\n      res.json({ user, accessToken });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.post('/api/auth/refresh', async (req, res, next) => {\n    try {\n      const refreshToken = req.cookies.refreshToken;\n      if (!refreshToken) {\n        return res.status(401).json({ error: 'Refresh token required' });\n      }\n\n      const decoded = AuthService.verifyRefreshToken(refreshToken);\n      const user = await UserModel.findById(decoded.userId).lean();\n\n      if (!user) {\n        return res.status(401).json({ error: 'User not found' });\n      }\n\n      const userJson = { ...user, id: user._id.toString() } as User;\n      const accessToken = AuthService.generateAccessToken(userJson);\n\n      res.json({ accessToken, user: userJson });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.post('/api/auth/logout', async (req, res) => {\n    const refreshToken = req.cookies.refreshToken;\n    if (refreshToken) {\n      AuthService.blacklistRefreshToken(refreshToken);\n    }\n\n    res.clearCookie('refreshToken');\n    res.status(204).send();\n  });\n\n  // Apply authentication middleware for protected routes\n  app.use('/api', authenticatedRateLimit);\n\n  // Communities routes\n  app.get('/api/communities/:id', optionalAuth, async (req, res, next) => {\n    try {\n      const community = await CommunityModel.findById(req.params.id);\n      if (!community) {\n        return res.status(404).json({ error: 'Community not found' });\n      }\n\n      res.json(community);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Posts routes\n  app.get('/api/communities/:id/posts', optionalAuth, async (req, res, next) => {\n    try {\n      const { cursor, limit } = getPaginationParams(req);\n      const { type, q, tags } = req.query;\n\n      const filter: any = { \n        communityId: req.params.id,\n        status: 'published',\n        ...buildCursorQuery('createdAt', cursor?.toISOString())\n      };\n\n      if (type) {\n        filter.type = type;\n      }\n\n      if (q) {\n        filter.$text = { $search: q as string };\n      }\n\n      if (tags) {\n        const tagArray = (tags as string).split(',').map(tag => tag.trim());\n        filter.tags = { $in: tagArray };\n      }\n\n      const posts = await PostModel.find(filter)\n        .populate('authorId', 'name email')\n        .sort({ createdAt: -1 })\n        .limit(limit + 1)\n        .lean();\n\n      const response = buildPaginatedResponse(posts.map(p => ({ ...p, id: p._id })), limit);\n      res.json(response);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.post('/api/posts', authMiddleware, rbacGuard('resident', 'moderator', 'admin'), postRateLimit, idempotencyMiddleware, async (req: AuthRequest, res, next) => {\n    try {\n      const postData = insertPostSchema.parse(req.body);\n\n      // Check spam\n      const spamCheck = SpamService.checkContent(postData.title, postData.body);\n      if (spamCheck.isSpam) {\n        logger.warn('Spam content detected:', { userId: req.user!.id, spamCheck });\n        postData.status = 'hidden';\n      }\n\n      // Record user activity for spam detection\n      SpamService.recordActivity(req.user!.id);\n\n      const post = new PostModel({\n        ...postData,\n        authorId: req.user!.id,\n      });\n\n      await post.save();\n      await post.populate('authorId', 'name email');\n\n      const postJson = post.toJSON();\n\n      // Emit real-time event\n      if (postJson.status === 'published') {\n        WebSocketService.emitPostCreated(postJson);\n      }\n\n      // Create notification for moderators if spam detected\n      if (spamCheck.isSpam) {\n        await NotificationService.notifyReportOpened(\n          postJson.id,\n          'post',\n          postJson.id\n        );\n      }\n\n      res.status(201).json(postJson);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.get('/api/posts/:id', optionalAuth, async (req, res, next) => {\n    try {\n      const post = await PostModel.findById(req.params.id)\n        .populate('authorId', 'name email');\n\n      if (!post || post.status === 'hidden') {\n        return res.status(404).json({ error: 'Post not found' });\n      }\n\n      res.json(post);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Comments routes\n  app.post('/api/posts/:id/comments', authMiddleware, rbacGuard('resident', 'moderator', 'admin'), async (req: AuthRequest, res, next) => {\n    try {\n      const commentData = insertCommentSchema.parse(req.body);\n\n      // Verify post exists\n      const post = await PostModel.findById(req.params.id);\n      if (!post) {\n        return res.status(404).json({ error: 'Post not found' });\n      }\n\n      const comment = new CommentModel({\n        ...commentData,\n        postId: req.params.id,\n        authorId: req.user!.id,\n      });\n\n      await comment.save();\n      await comment.populate('authorId', 'name email');\n\n      const commentJson = comment.toJSON();\n\n      // Emit real-time event\n      WebSocketService.emitCommentCreated(commentJson, req.params.id, post.communityId.toString());\n\n      res.status(201).json(commentJson);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.get('/api/posts/:id/comments', async (req, res, next) => {\n    try {\n      const { cursor, limit } = getPaginationParams(req);\n\n      const comments = await CommentModel.find({\n        postId: req.params.id,\n        status: 'published',\n        ...buildCursorQuery('createdAt', cursor?.toISOString())\n      })\n        .populate('authorId', 'name email')\n        .sort({ createdAt: -1 })\n        .limit(limit + 1)\n        .lean();\n\n      const response = buildPaginatedResponse(comments.map(c => ({ ...c, id: c._id })), limit);\n      res.json(response);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Votes routes\n  app.post('/api/posts/:id/votes', authMiddleware, rbacGuard('resident', 'moderator', 'admin'), idempotencyMiddleware, async (req: AuthRequest, res, next) => {\n    try {\n      const voteData = insertVoteSchema.parse(req.body);\n\n      // Verify post is a poll\n      const post = await PostModel.findById(req.params.id);\n      if (!post || post.type !== 'poll') {\n        return res.status(400).json({ error: 'Post is not a poll' });\n      }\n\n      // Upsert vote (update if exists, create if not)\n      await VoteModel.findOneAndUpdate(\n        { postId: req.params.id, userId: req.user!.id },\n        { optionIndex: voteData.optionIndex },\n        { upsert: true, new: true }\n      );\n\n      // Calculate new tally\n      const votes = await VoteModel.find({ postId: req.params.id });\n      const tally = votes.reduce((acc, vote) => {\n        acc[vote.optionIndex] = (acc[vote.optionIndex] || 0) + 1;\n        return acc;\n      }, {} as Record<number, number>);\n\n      // Emit real-time event\n      WebSocketService.emitPollTally(req.params.id, post.communityId.toString(), tally);\n\n      res.json({ tally, totalVotes: votes.length });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.get('/api/posts/:id/votes/tally', async (req, res, next) => {\n    try {\n      const votes = await VoteModel.find({ postId: req.params.id });\n      const tally = votes.reduce((acc, vote) => {\n        acc[vote.optionIndex] = (acc[vote.optionIndex] || 0) + 1;\n        return acc;\n      }, {} as Record<number, number>);\n\n      res.json({ tally, totalVotes: votes.length });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Reports routes\n  app.post('/api/reports', authMiddleware, rbacGuard('resident', 'moderator', 'admin'), idempotencyMiddleware, async (req: AuthRequest, res, next) => {\n    try {\n      const reportData = insertReportSchema.parse(req.body);\n\n      const report = new ReportModel({\n        ...reportData,\n        reporterId: req.user!.id,\n      });\n\n      await report.save();\n\n      const reportJson = report.toJSON();\n\n      // Emit to moderators\n      WebSocketService.emitReportOpened(reportJson);\n\n      res.status(201).json(reportJson);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Moderation routes\n  app.get('/api/moderation/reports', authMiddleware, rbacGuard('moderator', 'admin'), async (req, res, next) => {\n    try {\n      const { cursor, limit } = getPaginationParams(req);\n      const { status = 'open' } = req.query;\n\n      const reports = await ReportModel.find({\n        status,\n        ...buildCursorQuery('createdAt', cursor?.toISOString())\n      })\n        .populate('reporterId', 'name email')\n        .sort({ createdAt: -1 })\n        .limit(limit + 1)\n        .lean();\n\n      const response = buildPaginatedResponse(reports.map(r => ({ ...r, id: r._id })), limit);\n      res.json(response);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.post('/api/moderation/:id/hide', authMiddleware, rbacGuard('moderator', 'admin'), async (req, res, next) => {\n    try {\n      const { targetType } = req.body;\n\n      let result;\n      if (targetType === 'post') {\n        result = await PostModel.findByIdAndUpdate(\n          req.params.id,\n          { status: 'hidden' },\n          { new: true }\n        );\n      } else if (targetType === 'comment') {\n        result = await CommentModel.findByIdAndUpdate(\n          req.params.id,\n          { status: 'hidden' },\n          { new: true }\n        );\n      }\n\n      if (!result) {\n        return res.status(404).json({ error: 'Content not found' });\n      }\n\n      res.json(result);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.post('/api/moderation/reports/:id/resolve', authMiddleware, rbacGuard('moderator', 'admin'), async (req, res, next) => {\n    try {\n      const report = await ReportModel.findByIdAndUpdate(\n        req.params.id,\n        { status: 'closed' },\n        { new: true }\n      );\n\n      if (!report) {\n        return res.status(404).json({ error: 'Report not found' });\n      }\n\n      res.json(report);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Upload routes\n  app.post('/api/uploads/sign', authMiddleware, async (req: AuthRequest, res, next) => {\n    try {\n      const { contentType, filename } = req.body;\n\n      if (!UploadService.validateFileType(contentType)) {\n        return res.status(400).json({ error: 'Invalid file type' });\n      }\n\n      const { url, key } = await UploadService.generatePresignedUrl(\n        filename,\n        contentType,\n        req.user!.id\n      );\n\n      res.json({ url, key, publicUrl: UploadService.getPublicUrl(key) });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Notifications routes\n  app.get('/api/notifications', authMiddleware, async (req: AuthRequest, res, next) => {\n    try {\n      const notifications = await NotificationService.getUserNotifications(req.user!.id);\n      res.json(notifications);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.get('/api/notifications/unread-count', authMiddleware, async (req: AuthRequest, res, next) => {\n    try {\n      const count = await NotificationService.getUnreadCount(req.user!.id);\n      res.json({ count });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.post('/api/notifications/:id/read', authMiddleware, async (req: AuthRequest, res, next) => {\n    try {\n      await NotificationService.markAsRead(req.params.id, req.user!.id);\n      res.status(204).send();\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Error handling only for API routes - let Vite handle other routes\n  app.use('/api', notFoundHandler);\n  app.use(errorHandler);\n\n  const httpServer = createServer(app);\n\n  // Initialize WebSocket\n  WebSocketService.initialize(httpServer);\n\n  return httpServer;\n}\n","size_bytes":16067},"server/storage.ts":{"content":"import { UserModel, UserDocument } from \"./models/User\";\nimport { PostModel } from \"./models/Post\";\nimport { CommentModel } from \"./models/Comment\";\nimport { CommunityModel } from \"./models/Community\";\nimport { NotificationModel } from \"./models/Notification\";\nimport { ReportModel } from \"./models/Report\";\nimport { VoteModel } from \"./models/Vote\";\nimport type { User, InsertUser } from \"@shared/schema\";\nimport bcrypt from \"bcryptjs\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MongoStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    try {\n      const user = await UserModel.findById(id).lean();\n      if (!user) return undefined;\n      \n      return {\n        id: user._id.toString(),\n        email: user.email,\n        name: user.name,\n        role: user.roles[0] || 'resident',\n        communityIds: user.communityIds?.map(id => id.toString()) || [],\n        createdAt: user.createdAt || new Date(),\n      };\n    } catch (error) {\n      console.error('Error getting user by ID:', error);\n      return undefined;\n    }\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    try {\n      const user = await UserModel.findOne({ email: email.toLowerCase() }).lean();\n      if (!user) return undefined;\n      \n      return {\n        id: user._id.toString(),\n        email: user.email,\n        name: user.name,\n        role: user.roles[0] || 'resident',\n        communityIds: user.communityIds?.map(id => id.toString()) || [],\n        createdAt: user.createdAt || new Date(),\n      };\n    } catch (error) {\n      console.error('Error getting user by email:', error);\n      return undefined;\n    }\n  }\n\n  async createUser(userData: InsertUser): Promise<User> {\n    try {\n      // Hash password\n      const salt = await bcrypt.genSalt(10);\n      const passwordHash = await bcrypt.hash(userData.password, salt);\n\n      const user = new UserModel({\n        email: userData.email.toLowerCase(),\n        name: userData.name,\n        passwordHash,\n        roles: [userData.role || 'resident'],\n        communityIds: userData.communityIds || [],\n      });\n\n      const savedUser = await user.save();\n      \n      return {\n        id: savedUser._id.toString(),\n        email: savedUser.email,\n        name: savedUser.name,\n        role: savedUser.roles[0] || 'resident',\n        communityIds: savedUser.communityIds?.map(id => id.toString()) || [],\n        createdAt: savedUser.createdAt || new Date(),\n      };\n    } catch (error) {\n      console.error('Error creating user:', error);\n      throw new Error('Failed to create user');\n    }\n  }\n\n  async authenticateUser(email: string, password: string): Promise<User | null> {\n    try {\n      const user = await UserModel.findOne({ email: email.toLowerCase() });\n      if (!user) return null;\n\n      const isMatch = await user.comparePassword(password);\n      if (!isMatch) return null;\n\n      return {\n        id: user._id.toString(),\n        email: user.email,\n        name: user.name,\n        role: user.roles[0] || 'resident',\n        communityIds: user.communityIds?.map(id => id.toString()) || [],\n        createdAt: user.createdAt || new Date(),\n      };\n    } catch (error) {\n      console.error('Error authenticating user:', error);\n      return null;\n    }\n  }\n}\n\nexport const storage = new MongoStorage();\n","size_bytes":3488},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { z } from \"zod\";\n\n// User schemas\nexport const userSchema = z.object({\n  id: z.string(),\n  email: z.string().email(),\n  name: z.string(),\n  passwordHash: z.string(),\n  roles: z.array(z.enum(['admin', 'moderator', 'resident'])),\n  communityIds: z.array(z.string()),\n  unitId: z.string().optional(),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n});\n\nexport const insertUserSchema = z.object({\n  email: z.string().email(),\n  name: z.string().min(1),\n  password: z.string().min(6),\n  roles: z.array(z.enum(['admin', 'moderator', 'resident'])).default(['resident']),\n  communityIds: z.array(z.string()).default([]),\n  unitId: z.string().optional(),\n});\n\n// Community schemas\nexport const communitySchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  address: z.string(),\n  settings: z.object({\n    postMaxLength: z.number().default(8000),\n    allowedMediaTypes: z.array(z.string()).default(['image/jpeg', 'image/png']),\n  }),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n});\n\nexport const insertCommunitySchema = z.object({\n  name: z.string().min(1),\n  address: z.string().min(1),\n  settings: z.object({\n    postMaxLength: z.number().default(8000),\n    allowedMediaTypes: z.array(z.string()).default(['image/jpeg', 'image/png']),\n  }).default({}),\n});\n\n// Post schemas\nexport const postMetaSchema = z.object({\n  price: z.number().optional(),\n  images: z.array(z.string()).optional(),\n  options: z.array(z.string()).optional(),\n});\n\nexport const postSchema = z.object({\n  id: z.string(),\n  communityId: z.string(),\n  authorId: z.string(),\n  type: z.enum(['announcement', 'service', 'market', 'poll']),\n  title: z.string(),\n  body: z.string(),\n  tags: z.array(z.string()).default([]),\n  status: z.enum(['published', 'hidden']).default('published'),\n  meta: postMetaSchema.optional(),\n  expiresAt: z.date().optional(),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n});\n\nexport const insertPostSchema = z.object({\n  communityId: z.string(),\n  type: z.enum(['announcement', 'service', 'market', 'poll']),\n  title: z.string().min(1).max(200),\n  body: z.string().min(1).max(8000),\n  tags: z.array(z.string()).default([]),\n  meta: postMetaSchema.optional(),\n  expiresAt: z.date().optional(),\n});\n\n// Comment schemas\nexport const commentSchema = z.object({\n  id: z.string(),\n  postId: z.string(),\n  authorId: z.string(),\n  body: z.string(),\n  status: z.enum(['published', 'hidden']).default('published'),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n});\n\nexport const insertCommentSchema = z.object({\n  postId: z.string(),\n  body: z.string().min(1).max(2000),\n});\n\n// Vote schemas\nexport const voteSchema = z.object({\n  id: z.string(),\n  postId: z.string(),\n  userId: z.string(),\n  optionIndex: z.number(),\n  createdAt: z.date(),\n});\n\nexport const insertVoteSchema = z.object({\n  postId: z.string(),\n  optionIndex: z.number(),\n});\n\n// Report schemas\nexport const reportSchema = z.object({\n  id: z.string(),\n  targetType: z.enum(['post', 'comment', 'user']),\n  targetId: z.string(),\n  reporterId: z.string(),\n  reason: z.string(),\n  status: z.enum(['open', 'closed']).default('open'),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n});\n\nexport const insertReportSchema = z.object({\n  targetType: z.enum(['post', 'comment', 'user']),\n  targetId: z.string(),\n  reason: z.string().min(1),\n});\n\n// Notification schemas\nexport const notificationSchema = z.object({\n  id: z.string(),\n  userId: z.string(),\n  type: z.string(),\n  payload: z.record(z.any()),\n  readAt: z.date().optional(),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n});\n\nexport const insertNotificationSchema = z.object({\n  userId: z.string(),\n  type: z.string(),\n  payload: z.record(z.any()),\n});\n\n// Type exports\nexport type User = z.infer<typeof userSchema>;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Community = z.infer<typeof communitySchema>;\nexport type InsertCommunity = z.infer<typeof insertCommunitySchema>;\nexport type Post = z.infer<typeof postSchema>;\nexport type InsertPost = z.infer<typeof insertPostSchema>;\nexport type Comment = z.infer<typeof commentSchema>;\nexport type InsertComment = z.infer<typeof insertCommentSchema>;\nexport type Vote = z.infer<typeof voteSchema>;\nexport type InsertVote = z.infer<typeof insertVoteSchema>;\nexport type Report = z.infer<typeof reportSchema>;\nexport type InsertReport = z.infer<typeof insertReportSchema>;\nexport type Notification = z.infer<typeof notificationSchema>;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\n","size_bytes":4492},"client/src/App.tsx":{"content":"import { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuthStore } from \"@/lib/store\";\nimport Landing from \"@/pages/landing\";\nimport Home from \"@/pages/home\";\n\nfunction App() {\n  const { user, isLoading } = useAuthStore();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-gray-900\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"min-h-screen bg-background\">\n          {user ? <Home /> : <Landing />}\n          <Toaster />\n        </div>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":917},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(207 84% 46%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(142 76% 36%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(210 40% 96%);\n  --muted-foreground: hsl(215 13% 65%);\n  --accent: hsl(210 40% 98%);\n  --accent-foreground: hsl(207 84% 46%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(214 32% 91%);\n  --input: hsl(214 32% 91%);\n  --ring: hsl(207 84% 46%);\n  --chart-1: hsl(207 84% 46%);\n  --chart-2: hsl(142 76% 36%);\n  --chart-3: hsl(35 91% 65%);\n  --chart-4: hsl(147 78% 42%);\n  --chart-5: hsl(341 75% 51%);\n  --sidebar: hsl(0 0% 100%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(207 84% 46%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(210 40% 98%);\n  --sidebar-accent-foreground: hsl(207 84% 46%);\n  --sidebar-border: hsl(214 32% 91%);\n  --sidebar-ring: hsl(207 84% 46%);\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --primary-50: hsl(210 100% 97%);\n  --primary-100: hsl(210 100% 92%);\n  --primary-500: hsl(207 84% 46%);\n  --primary-600: hsl(210 86% 42%);\n  --primary-700: hsl(212 92% 32%);\n  --secondary-50: hsl(138 76% 97%);\n  --secondary-500: hsl(142 76% 36%);\n  --secondary-600: hsl(143 78% 32%);\n  --accent-500: hsl(35 91% 65%);\n  --accent-600: hsl(32 95% 59%);\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(210 40% 98%);\n  --card: hsl(222 84% 5%);\n  --card-foreground: hsl(210 40% 98%);\n  --popover: hsl(222 84% 5%);\n  --popover-foreground: hsl(210 40% 98%);\n  --primary: hsl(207 84% 46%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(142 76% 36%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(217 33% 17%);\n  --muted-foreground: hsl(215 20% 65%);\n  --accent: hsl(217 33% 17%);\n  --accent-foreground: hsl(207 84% 46%);\n  --destructive: hsl(0 62% 30%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(217 33% 17%);\n  --input: hsl(217 33% 17%);\n  --ring: hsl(207 84% 46%);\n  --chart-1: hsl(207 84% 46%);\n  --chart-2: hsl(142 76% 36%);\n  --chart-3: hsl(35 91% 65%);\n  --chart-4: hsl(147 78% 42%);\n  --chart-5: hsl(341 75% 51%);\n  --sidebar: hsl(222 84% 5%);\n  --sidebar-foreground: hsl(210 40% 98%);\n  --sidebar-primary: hsl(207 84% 46%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(217 33% 17%);\n  --sidebar-accent-foreground: hsl(207 84% 46%);\n  --sidebar-border: hsl(217 33% 17%);\n  --sidebar-ring: hsl(207 84% 46%);\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --primary-50: hsl(210 100% 97%);\n  --primary-100: hsl(210 100% 92%);\n  --primary-500: hsl(207 84% 46%);\n  --primary-600: hsl(210 86% 42%);\n  --primary-700: hsl(212 92% 32%);\n  --secondary-50: hsl(138 76% 97%);\n  --secondary-500: hsl(142 76% 36%);\n  --secondary-600: hsl(143 78% 32%);\n  --accent-500: hsl(35 91% 65%);\n  --accent-600: hsl(32 95% 59%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n  }\n}\n","size_bytes":3421},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/config/database.ts":{"content":"import mongoose from 'mongoose';\nimport { env } from './env';\nimport { logger } from './logger';\n\nexport async function connectDatabase() {\n  try {\n    const mongoUri = env.DATABASE_URL || 'mongodb://localhost:27017/community-hub';\n    \n    await mongoose.connect(mongoUri, {\n      serverSelectionTimeoutMS: 5000,\n    });\n    \n    logger.info('Connected to MongoDB');\n  } catch (error) {\n    logger.error('MongoDB connection error:', error);\n    // Don't exit in development, just log the error\n    if (env.NODE_ENV === 'production') {\n      process.exit(1);\n    }\n  }\n}\n","size_bytes":571},"server/config/env.ts":{"content":"import { z } from 'zod';\n\nconst envSchema = z.object({\n  NODE_ENV: z.enum(['development', 'production']).default('development'),\n  PORT: z.string().transform(Number).default(\"5000\"),\n  \n  // JWT\n  JWT_ACCESS_SECRET: z.string().default('access-secret-dev'),\n  JWT_REFRESH_SECRET: z.string().default('refresh-secret-dev'),\n  REFRESH_TOKEN_TTL_DAYS: z.string().transform(Number).default(\"30\"),\n  \n  // CORS\n  CORS_ORIGINS: z.string().default('http://localhost:5000'),\n  \n  // Database\n  DATABASE_URL: z.string().default('postgresql://localhost:5432/communityhub'),\n  \n  // S3\n  S3_ENDPOINT: z.string().optional(),\n  S3_REGION: z.string().default('us-east-1'),\n  S3_BUCKET: z.string().default('community-hub-media'),\n  S3_ACCESS_KEY: z.string().default('placeholder-access-key'),\n  S3_SECRET_KEY: z.string().default('placeholder-secret-key'),\n  \n  // Spam\n  SPAM_THRESHOLD: z.string().transform(Number).default(\"0.7\"),\n  POST_MAX_LEN: z.string().transform(Number).default(\"8000\"),\n});\n\nexport const env = envSchema.parse(process.env);\n","size_bytes":1031},"server/config/logger.ts":{"content":"import pino from 'pino';\n\nexport const logger = pino({\n  level: process.env.NODE_ENV === 'development' ? 'debug' : 'info',\n  transport: process.env.NODE_ENV === 'development' ? {\n    target: 'pino-pretty',\n    options: {\n      colorize: true\n    }\n  } : undefined,\n  formatters: {\n    level: (label) => {\n      return { level: label };\n    },\n  },\n});\n","size_bytes":352},"server/middlewares/auth.ts":{"content":"import { Request, Response, NextFunction } from 'express';\nimport { AuthService } from '../services/auth.service';\nimport { UserModel } from '../models/User';\nimport { User } from '@shared/schema';\n\nexport interface AuthRequest extends Request {\n  user?: User;\n}\n\nexport const authMiddleware = async (\n  req: AuthRequest,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const token = req.headers.authorization?.replace('Bearer ', '') ||\n                  req.cookies?.accessToken;\n\n    if (!token) {\n      return res.status(401).json({ error: 'Access token required' });\n    }\n\n    const decoded = AuthService.verifyAccessToken(token);\n    const user = await UserModel.findById(decoded.userId).lean();\n\n    if (!user) {\n      return res.status(401).json({ error: 'User not found' });\n    }\n\n    req.user = { ...user, id: user._id.toString() } as User;\n    next();\n  } catch (error) {\n    return res.status(401).json({ error: 'Invalid token' });\n  }\n};\n\nexport const optionalAuth = async (\n  req: AuthRequest,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const token = req.headers.authorization?.replace('Bearer ', '') ||\n                  req.cookies?.accessToken;\n\n    if (!token) {\n      return next();\n    }\n\n    const decoded = AuthService.verifyAccessToken(token);\n    const user = await UserModel.findById(decoded.userId).lean();\n\n    if (user) {\n      req.user = { ...user, id: user._id.toString() } as User;\n    }\n\n    next();\n  } catch (error) {\n    // Invalid token, but continue without user\n    next();\n  }\n};\n","size_bytes":1543},"server/middlewares/error.ts":{"content":"import { Request, Response, NextFunction } from 'express';\nimport { logger } from '../config/logger';\nimport { z } from 'zod';\n\nexport interface ApiError extends Error {\n  statusCode?: number;\n  status?: number;\n}\n\nexport const errorHandler = (\n  err: ApiError,\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  logger.error('Error occurred:', {\n    error: err.message,\n    stack: err.stack,\n    url: req.url,\n    method: req.method,\n    body: req.body,\n  });\n\n  // Mongoose validation error\n  if (err.name === 'ValidationError') {\n    return res.status(400).json({\n      error: 'Validation error',\n      details: err.message,\n    });\n  }\n\n  // Mongoose duplicate key error\n  if (err.name === 'MongoServerError' && (err as any).code === 11000) {\n    return res.status(409).json({\n      error: 'Resource already exists',\n      details: 'Duplicate key error',\n    });\n  }\n\n  // Zod validation error\n  if (err instanceof z.ZodError) {\n    return res.status(400).json({\n      error: 'Validation error',\n      details: err.errors,\n    });\n  }\n\n  // JWT errors\n  if (err.name === 'JsonWebTokenError') {\n    return res.status(401).json({\n      error: 'Invalid token',\n    });\n  }\n\n  if (err.name === 'TokenExpiredError') {\n    return res.status(401).json({\n      error: 'Token expired',\n    });\n  }\n\n  // Default error\n  const statusCode = err.statusCode || err.status || 500;\n  const message = statusCode === 500 ? 'Internal server error' : err.message;\n\n  res.status(statusCode).json({\n    error: message,\n    ...(process.env.NODE_ENV === 'development' && { stack: err.stack }),\n  });\n};\n\nexport const notFoundHandler = (req: Request, res: Response) => {\n  res.status(404).json({\n    error: 'Route not found',\n    path: req.path,\n  });\n};\n","size_bytes":1747},"server/middlewares/rateLimit.ts":{"content":"import rateLimit, { ipKeyGenerator } from 'express-rate-limit';\nimport { Request } from 'express';\nimport { AuthRequest } from './auth';\n\n// General rate limit for all requests\nexport const generalRateLimit = rateLimit({\n  windowMs: 60 * 1000, // 1 minute\n  max: 100, // 100 requests per minute per IP\n  message: {\n    error: 'Too many requests from this IP, please try again later.',\n  },\n  standardHeaders: true,\n  legacyHeaders: false,\n  trustProxy: true, // Fix for Replit environment\n});\n\n// Stricter rate limit for authentication endpoints\nexport const authRateLimit = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 5, // 5 attempts per 15 minutes per IP\n  message: {\n    error: 'Too many authentication attempts, please try again later.',\n  },\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\n// Rate limit for authenticated users (higher limit)\nexport const authenticatedRateLimit = rateLimit({\n  windowMs: 60 * 1000, // 1 minute\n  max: 500, // 500 requests per minute for authenticated users\n  keyGenerator: (req: Request) => {\n    const authReq = req as AuthRequest;\n    return authReq.user?.id || ipKeyGenerator(req);\n  },\n  message: {\n    error: 'Too many requests, please try again later.',\n  },\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\n// Rate limit for posting content\nexport const postRateLimit = rateLimit({\n  windowMs: 5 * 60 * 1000, // 5 minutes\n  max: 10, // 10 posts per 5 minutes\n  keyGenerator: (req: Request) => {\n    const authReq = req as AuthRequest;\n    return authReq.user?.id || ipKeyGenerator(req);\n  },\n  message: {\n    error: 'Too many posts created, please slow down.',\n  },\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n","size_bytes":1694},"server/middlewares/rbacGuard.ts":{"content":"import { Response, NextFunction } from 'express';\nimport { AuthRequest } from './auth';\nimport { RBACService } from '../services/rbac';\n\nexport const rbacGuard = (...allowedRoles: string[]) => {\n  return (req: AuthRequest, res: Response, next: NextFunction) => {\n    if (!req.user) {\n      return res.status(401).json({ error: 'Authentication required' });\n    }\n\n    const hasRole = RBACService.hasAnyRole(req.user, allowedRoles);\n    \n    if (!hasRole) {\n      return res.status(403).json({ \n        error: 'Insufficient permissions',\n        required: allowedRoles,\n        current: req.user.roles\n      });\n    }\n\n    next();\n  };\n};\n\nexport const permissionGuard = (permission: string) => {\n  return (req: AuthRequest, res: Response, next: NextFunction) => {\n    if (!req.user) {\n      return res.status(401).json({ error: 'Authentication required' });\n    }\n\n    const hasPermission = RBACService.hasPermission(req.user, permission);\n    \n    if (!hasPermission) {\n      return res.status(403).json({ \n        error: 'Insufficient permissions',\n        required: permission\n      });\n    }\n\n    next();\n  };\n};\n","size_bytes":1117},"server/models/Comment.ts":{"content":"import mongoose, { Schema, Document } from 'mongoose';\nimport { Comment as CommentType } from '@shared/schema';\n\nexport interface CommentDocument extends Omit<CommentType, 'id'>, Document {}\n\nconst commentSchema = new Schema({\n  postId: { \n    type: Schema.Types.ObjectId, \n    ref: 'Post', \n    required: true, \n    index: true \n  },\n  authorId: { \n    type: Schema.Types.ObjectId, \n    ref: 'User', \n    required: true, \n    index: true \n  },\n  body: { type: String, required: true },\n  status: { \n    type: String, \n    enum: ['published', 'hidden'], \n    default: 'published' \n  },\n}, {\n  timestamps: true,\n  toJSON: {\n    transform: function(doc, ret) {\n      ret.id = ret._id;\n      delete ret._id;\n      delete ret.__v;\n      return ret;\n    }\n  }\n});\n\ncommentSchema.index({ postId: 1, createdAt: -1 });\ncommentSchema.index({ authorId: 1, createdAt: -1 });\n\nexport const CommentModel = mongoose.model<CommentDocument>('Comment', commentSchema);\n","size_bytes":952},"server/models/Community.ts":{"content":"import mongoose, { Schema, Document } from 'mongoose';\nimport { Community as CommunityType } from '@shared/schema';\n\nexport interface CommunityDocument extends Omit<CommunityType, 'id'>, Document {}\n\nconst communitySchema = new Schema({\n  name: { type: String, required: true },\n  address: { type: String, required: true },\n  settings: {\n    postMaxLength: { type: Number, default: 8000 },\n    allowedMediaTypes: [{ type: String, default: ['image/jpeg', 'image/png'] }],\n  },\n}, {\n  timestamps: true,\n  toJSON: {\n    transform: function(doc, ret) {\n      ret.id = ret._id;\n      delete ret._id;\n      delete ret.__v;\n      return ret;\n    }\n  }\n});\n\nexport const CommunityModel = mongoose.model<CommunityDocument>('Community', communitySchema);\n","size_bytes":745},"server/models/Notification.ts":{"content":"import mongoose, { Schema, Document } from 'mongoose';\nimport { Notification as NotificationType } from '@shared/schema';\n\nexport interface NotificationDocument extends Omit<NotificationType, 'id'>, Document {}\n\nconst notificationSchema = new Schema({\n  userId: { \n    type: Schema.Types.ObjectId, \n    ref: 'User', \n    required: true, \n    index: true \n  },\n  type: { type: String, required: true },\n  payload: { type: Schema.Types.Mixed, required: true },\n  readAt: { type: Date },\n}, {\n  timestamps: true,\n  toJSON: {\n    transform: function(doc, ret) {\n      ret.id = ret._id;\n      delete ret._id;\n      delete ret.__v;\n      return ret;\n    }\n  }\n});\n\nnotificationSchema.index({ userId: 1, createdAt: -1 });\nnotificationSchema.index({ userId: 1, readAt: 1 });\n\nexport const NotificationModel = mongoose.model<NotificationDocument>('Notification', notificationSchema);\n","size_bytes":875},"server/models/Post.ts":{"content":"import mongoose, { Schema, Document } from 'mongoose';\nimport { Post as PostType } from '@shared/schema';\n\nexport interface PostDocument extends Omit<PostType, 'id'>, Document {}\n\nconst postSchema = new Schema({\n  communityId: { \n    type: Schema.Types.ObjectId, \n    ref: 'Community', \n    required: true, \n    index: true \n  },\n  authorId: { \n    type: Schema.Types.ObjectId, \n    ref: 'User', \n    required: true, \n    index: true \n  },\n  type: { \n    type: String, \n    enum: ['announcement', 'service', 'market', 'poll'], \n    required: true,\n    index: true \n  },\n  title: { type: String, required: true },\n  body: { type: String, required: true },\n  tags: [{ type: String }],\n  status: { \n    type: String, \n    enum: ['published', 'hidden'], \n    default: 'published',\n    index: true \n  },\n  meta: {\n    price: { type: Number },\n    images: [{ type: String }],\n    options: [{ type: String }],\n  },\n  expiresAt: { type: Date, index: true },\n}, {\n  timestamps: true,\n  toJSON: {\n    transform: function(doc, ret) {\n      ret.id = ret._id;\n      delete ret._id;\n      delete ret.__v;\n      return ret;\n    }\n  }\n});\n\n// Text search index\npostSchema.index({ title: 'text', body: 'text' });\n\n// Compound indexes\npostSchema.index({ communityId: 1, createdAt: -1 });\npostSchema.index({ authorId: 1, createdAt: -1 });\npostSchema.index({ type: 1, createdAt: -1 });\npostSchema.index({ status: 1, createdAt: -1 });\n\n// TTL index for expiration\npostSchema.index({ expiresAt: 1 }, { expireAfterSeconds: 0 });\n\nexport const PostModel = mongoose.model<PostDocument>('Post', postSchema);\n","size_bytes":1582},"server/models/Report.ts":{"content":"import mongoose, { Schema, Document } from 'mongoose';\nimport { Report as ReportType } from '@shared/schema';\n\nexport interface ReportDocument extends Omit<ReportType, 'id'>, Document {}\n\nconst reportSchema = new Schema({\n  targetType: { \n    type: String, \n    enum: ['post', 'comment', 'user'], \n    required: true \n  },\n  targetId: { \n    type: Schema.Types.ObjectId, \n    required: true, \n    index: true \n  },\n  reporterId: { \n    type: Schema.Types.ObjectId, \n    ref: 'User', \n    required: true, \n    index: true \n  },\n  reason: { type: String, required: true },\n  status: { \n    type: String, \n    enum: ['open', 'closed'], \n    default: 'open',\n    index: true \n  },\n}, {\n  timestamps: true,\n  toJSON: {\n    transform: function(doc, ret) {\n      ret.id = ret._id;\n      delete ret._id;\n      delete ret.__v;\n      return ret;\n    }\n  }\n});\n\nreportSchema.index({ status: 1, createdAt: -1 });\nreportSchema.index({ targetType: 1, targetId: 1 });\n\nexport const ReportModel = mongoose.model<ReportDocument>('Report', reportSchema);\n","size_bytes":1037},"server/models/User.ts":{"content":"import mongoose, { Schema, Document } from 'mongoose';\nimport bcrypt from 'bcryptjs';\nimport { User as UserType } from '@shared/schema';\n\nexport interface UserDocument extends Omit<UserType, 'id'>, Document {\n  comparePassword(password: string): Promise<boolean>;\n}\n\nconst userSchema = new Schema({\n  email: { \n    type: String, \n    required: true, \n    unique: true, \n    index: true,\n    lowercase: true \n  },\n  name: { type: String, required: true },\n  passwordHash: { type: String, required: true },\n  roles: [{ \n    type: String, \n    enum: ['admin', 'moderator', 'resident'], \n    default: ['resident'] \n  }],\n  communityIds: [{ type: Schema.Types.ObjectId, ref: 'Community' }],\n  unitId: { type: Schema.Types.ObjectId, ref: 'Unit' },\n}, {\n  timestamps: true,\n  toJSON: {\n    transform: function(doc, ret) {\n      ret.id = ret._id;\n      delete ret._id;\n      delete ret.__v;\n      delete ret.passwordHash;\n      return ret;\n    }\n  }\n});\n\nuserSchema.index({ email: 1 });\nuserSchema.index({ communityIds: 1 });\n\nuserSchema.methods.comparePassword = async function(password: string): Promise<boolean> {\n  return bcrypt.compare(password, this.passwordHash);\n};\n\nuserSchema.pre('save', async function(next) {\n  if (!this.isModified('passwordHash')) return next();\n  \n  const salt = await bcrypt.genSalt(10);\n  this.passwordHash = await bcrypt.hash(this.passwordHash, salt);\n  next();\n});\n\nexport const UserModel = mongoose.model<UserDocument>('User', userSchema);\n","size_bytes":1468},"server/models/Vote.ts":{"content":"import mongoose, { Schema, Document } from 'mongoose';\nimport { Vote as VoteType } from '@shared/schema';\n\nexport interface VoteDocument extends Omit<VoteType, 'id'>, Document {}\n\nconst voteSchema = new Schema({\n  postId: { \n    type: Schema.Types.ObjectId, \n    ref: 'Post', \n    required: true, \n    index: true \n  },\n  userId: { \n    type: Schema.Types.ObjectId, \n    ref: 'User', \n    required: true, \n    index: true \n  },\n  optionIndex: { type: Number, required: true },\n}, {\n  timestamps: { createdAt: true, updatedAt: false },\n  toJSON: {\n    transform: function(doc, ret) {\n      ret.id = ret._id;\n      delete ret._id;\n      delete ret.__v;\n      return ret;\n    }\n  }\n});\n\n// Unique constraint to ensure one vote per user per post\nvoteSchema.index({ postId: 1, userId: 1 }, { unique: true });\n\nexport const VoteModel = mongoose.model<VoteDocument>('Vote', voteSchema);\n","size_bytes":880},"server/services/auth.service.ts":{"content":"import jwt from 'jsonwebtoken';\nimport { env } from '../config/env';\nimport { UserModel, UserDocument } from '../models/User';\nimport { User } from '@shared/schema';\n\nexport class AuthService {\n  private static refreshTokenBlacklist = new Set<string>();\n\n  static generateAccessToken(user: User): string {\n    return jwt.sign(\n      { \n        userId: user.id, \n        email: user.email, \n        roles: user.roles \n      },\n      env.JWT_ACCESS_SECRET,\n      { expiresIn: '15m' }\n    );\n  }\n\n  static generateRefreshToken(user: User): string {\n    return jwt.sign(\n      { userId: user.id },\n      env.JWT_REFRESH_SECRET,\n      { expiresIn: `${env.REFRESH_TOKEN_TTL_DAYS}d` }\n    );\n  }\n\n  static verifyAccessToken(token: string): any {\n    return jwt.verify(token, env.JWT_ACCESS_SECRET);\n  }\n\n  static verifyRefreshToken(token: string): any {\n    if (this.refreshTokenBlacklist.has(token)) {\n      throw new Error('Token is blacklisted');\n    }\n    return jwt.verify(token, env.JWT_REFRESH_SECRET);\n  }\n\n  static blacklistRefreshToken(token: string): void {\n    this.refreshTokenBlacklist.add(token);\n    \n    // Clean up expired tokens periodically\n    setTimeout(() => {\n      this.refreshTokenBlacklist.delete(token);\n    }, env.REFRESH_TOKEN_TTL_DAYS * 24 * 60 * 60 * 1000);\n  }\n\n  static async authenticateUser(email: string, password: string): Promise<User | null> {\n    const user = await UserModel.findOne({ email }).lean();\n    if (!user) return null;\n\n    const userDoc = await UserModel.findById(user._id);\n    if (!userDoc || !(await userDoc.comparePassword(password))) {\n      return null;\n    }\n\n    return userDoc.toJSON() as User;\n  }\n}\n","size_bytes":1657},"server/services/notifications.ts":{"content":"import { NotificationModel } from '../models/Notification';\nimport { InsertNotification } from '@shared/schema';\nimport { logger } from '../config/logger';\n\nexport class NotificationService {\n  static async create(notification: InsertNotification) {\n    try {\n      const newNotification = new NotificationModel(notification);\n      await newNotification.save();\n      \n      // Emit via WebSocket (will be handled by WebSocket service)\n      return newNotification.toJSON();\n    } catch (error) {\n      logger.error('Failed to create notification:', error);\n      throw error;\n    }\n  }\n\n  static async getUserNotifications(userId: string, limit: number = 20) {\n    try {\n      const notifications = await NotificationModel\n        .find({ userId })\n        .sort({ createdAt: -1 })\n        .limit(limit)\n        .lean();\n      \n      return notifications.map(n => ({ ...n, id: n._id }));\n    } catch (error) {\n      logger.error('Failed to get user notifications:', error);\n      throw error;\n    }\n  }\n\n  static async markAsRead(notificationId: string, userId: string) {\n    try {\n      await NotificationModel.findOneAndUpdate(\n        { _id: notificationId, userId },\n        { readAt: new Date() }\n      );\n    } catch (error) {\n      logger.error('Failed to mark notification as read:', error);\n      throw error;\n    }\n  }\n\n  static async getUnreadCount(userId: string): Promise<number> {\n    try {\n      return await NotificationModel.countDocuments({\n        userId,\n        readAt: { $exists: false }\n      });\n    } catch (error) {\n      logger.error('Failed to get unread count:', error);\n      return 0;\n    }\n  }\n\n  // Notification types\n  static async notifyNewPost(postId: string, communityId: string, authorId: string) {\n    // Notify all community members except the author\n    const notification: InsertNotification = {\n      userId: '', // Will be set for each user\n      type: 'post.created',\n      payload: { postId, communityId, authorId }\n    };\n\n    // This would normally query all community members and create notifications\n    // For now, we'll create a placeholder\n    logger.info(`New post notification created for post ${postId}`);\n  }\n\n  static async notifyNewComment(commentId: string, postId: string, authorId: string) {\n    const notification: InsertNotification = {\n      userId: '', // Will be set for post author\n      type: 'comment.created',\n      payload: { commentId, postId, authorId }\n    };\n\n    logger.info(`New comment notification created for comment ${commentId}`);\n  }\n\n  static async notifyReportOpened(reportId: string, targetType: string, targetId: string) {\n    const notification: InsertNotification = {\n      userId: '', // Will be set for moderators\n      type: 'report.opened',\n      payload: { reportId, targetType, targetId }\n    };\n\n    logger.info(`Report notification created for report ${reportId}`);\n  }\n}\n","size_bytes":2872},"server/services/rbac.ts":{"content":"import { User } from '@shared/schema';\n\nexport const PERMISSIONS = {\n  READ_POSTS: 'read:posts',\n  CREATE_POSTS: 'create:posts',\n  EDIT_OWN_POSTS: 'edit:own_posts',\n  DELETE_OWN_POSTS: 'delete:own_posts',\n  MODERATE_POSTS: 'moderate:posts',\n  READ_REPORTS: 'read:reports',\n  RESOLVE_REPORTS: 'resolve:reports',\n  MANAGE_COMMUNITY: 'manage:community',\n  MANAGE_USERS: 'manage:users',\n} as const;\n\nexport const ROLE_PERMISSIONS = {\n  resident: [\n    PERMISSIONS.READ_POSTS,\n    PERMISSIONS.CREATE_POSTS,\n    PERMISSIONS.EDIT_OWN_POSTS,\n    PERMISSIONS.DELETE_OWN_POSTS,\n  ],\n  moderator: [\n    PERMISSIONS.READ_POSTS,\n    PERMISSIONS.CREATE_POSTS,\n    PERMISSIONS.EDIT_OWN_POSTS,\n    PERMISSIONS.DELETE_OWN_POSTS,\n    PERMISSIONS.MODERATE_POSTS,\n    PERMISSIONS.READ_REPORTS,\n    PERMISSIONS.RESOLVE_REPORTS,\n  ],\n  admin: [\n    PERMISSIONS.READ_POSTS,\n    PERMISSIONS.CREATE_POSTS,\n    PERMISSIONS.EDIT_OWN_POSTS,\n    PERMISSIONS.DELETE_OWN_POSTS,\n    PERMISSIONS.MODERATE_POSTS,\n    PERMISSIONS.READ_REPORTS,\n    PERMISSIONS.RESOLVE_REPORTS,\n    PERMISSIONS.MANAGE_COMMUNITY,\n    PERMISSIONS.MANAGE_USERS,\n  ],\n} as const;\n\nexport class RBACService {\n  static hasPermission(user: User, permission: string): boolean {\n    for (const role of user.roles) {\n      if (ROLE_PERMISSIONS[role as keyof typeof ROLE_PERMISSIONS]?.includes(permission as any)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  static hasRole(user: User, role: string): boolean {\n    return user.roles.includes(role as any);\n  }\n\n  static hasAnyRole(user: User, roles: string[]): boolean {\n    return roles.some(role => user.roles.includes(role as any));\n  }\n\n  static canModerate(user: User): boolean {\n    return this.hasAnyRole(user, ['admin', 'moderator']);\n  }\n\n  static canManageCommunity(user: User): boolean {\n    return this.hasRole(user, 'admin');\n  }\n}\n","size_bytes":1848},"server/services/spam.ts":{"content":"import { env } from '../config/env';\n\nexport interface SpamCheckResult {\n  score: number;\n  isSpam: boolean;\n  reasons: string[];\n}\n\nexport class SpamService {\n  private static readonly SPAM_PATTERNS = [\n    /https?:\\/\\/[^\\s]+/gi, // URLs\n    /\\b(?:buy|sell|cheap|free|money|cash|prize|winner|click here)\\b/gi,\n    /(.)\\1{4,}/gi, // Repeated characters\n  ];\n\n  private static readonly BLOCKED_DOMAINS = [\n    'spam-site.com',\n    'malicious-domain.org',\n  ];\n\n  static checkContent(title: string, body: string): SpamCheckResult {\n    const content = `${title} ${body}`.toLowerCase();\n    const reasons: string[] = [];\n    let score = 0;\n\n    // Check length\n    if (content.length < 10) {\n      score += 0.3;\n      reasons.push('Content too short');\n    }\n\n    if (content.length > env.POST_MAX_LEN) {\n      score += 0.5;\n      reasons.push('Content too long');\n    }\n\n    // Check for spam patterns\n    for (const pattern of this.SPAM_PATTERNS) {\n      const matches = content.match(pattern);\n      if (matches) {\n        const ratio = matches.length / content.split(' ').length;\n        score += Math.min(ratio * 0.5, 0.4);\n        reasons.push(`Suspicious pattern detected: ${pattern.source}`);\n      }\n    }\n\n    // Check for blocked domains\n    for (const domain of this.BLOCKED_DOMAINS) {\n      if (content.includes(domain)) {\n        score += 0.8;\n        reasons.push(`Blocked domain detected: ${domain}`);\n      }\n    }\n\n    // Check for repetitive n-grams\n    const words = content.split(/\\s+/);\n    const bigrams = new Map<string, number>();\n    \n    for (let i = 0; i < words.length - 1; i++) {\n      const bigram = `${words[i]} ${words[i + 1]}`;\n      bigrams.set(bigram, (bigrams.get(bigram) || 0) + 1);\n    }\n\n    const maxRepeats = Math.max(...bigrams.values());\n    if (maxRepeats > 3) {\n      score += Math.min((maxRepeats - 3) * 0.1, 0.3);\n      reasons.push('Repetitive content detected');\n    }\n\n    // Cap the score at 1.0\n    score = Math.min(score, 1.0);\n\n    return {\n      score,\n      isSpam: score >= env.SPAM_THRESHOLD,\n      reasons,\n    };\n  }\n\n  static checkFrequency(userId: string, timeWindow: number = 300000): boolean {\n    // This would normally check against a rate limiting store (Redis)\n    // For now, we'll use a simple in-memory approach\n    const now = Date.now();\n    const userActivity = this.userActivityMap.get(userId) || [];\n    \n    // Clean old entries\n    const recentActivity = userActivity.filter(time => now - time < timeWindow);\n    \n    // Update the map\n    this.userActivityMap.set(userId, recentActivity);\n    \n    // Check if user is posting too frequently (more than 5 posts in 5 minutes)\n    return recentActivity.length >= 5;\n  }\n\n  private static userActivityMap = new Map<string, number[]>();\n\n  static recordActivity(userId: string): void {\n    const now = Date.now();\n    const userActivity = this.userActivityMap.get(userId) || [];\n    userActivity.push(now);\n    this.userActivityMap.set(userId, userActivity);\n  }\n}\n","size_bytes":2987},"server/services/uploads.ts":{"content":"import { S3Client, PutObjectCommand } from '@aws-sdk/client-s3';\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\nimport { env } from '../config/env';\nimport { randomUUID } from 'crypto';\nimport path from 'path';\n\nexport class UploadService {\n  private static s3Client: S3Client;\n\n  static getS3Client(): S3Client {\n    if (!this.s3Client) {\n      this.s3Client = new S3Client({\n        region: env.S3_REGION,\n        endpoint: env.S3_ENDPOINT,\n        credentials: {\n          accessKeyId: env.S3_ACCESS_KEY,\n          secretAccessKey: env.S3_SECRET_KEY,\n        },\n      });\n    }\n    return this.s3Client;\n  }\n\n  static async generatePresignedUrl(\n    filename: string,\n    contentType: string,\n    userId: string\n  ): Promise<{ url: string; key: string; fields?: Record<string, string> }> {\n    const fileExtension = path.extname(filename);\n    const key = `uploads/${userId}/${randomUUID()}${fileExtension}`;\n\n    const command = new PutObjectCommand({\n      Bucket: env.S3_BUCKET,\n      Key: key,\n      ContentType: contentType,\n      ContentLength: 5 * 1024 * 1024, // 5MB max\n    });\n\n    const url = await getSignedUrl(this.getS3Client(), command, { \n      expiresIn: 300 // 5 minutes\n    });\n\n    return {\n      url,\n      key,\n    };\n  }\n\n  static validateFileType(contentType: string): boolean {\n    const allowedTypes = [\n      'image/jpeg',\n      'image/png',\n      'image/gif',\n      'image/webp',\n    ];\n    \n    return allowedTypes.includes(contentType);\n  }\n\n  static validateFileSize(size: number): boolean {\n    const maxSize = 5 * 1024 * 1024; // 5MB\n    return size <= maxSize;\n  }\n\n  static getPublicUrl(key: string): string {\n    if (env.S3_ENDPOINT) {\n      return `${env.S3_ENDPOINT}/${env.S3_BUCKET}/${key}`;\n    }\n    return `https://${env.S3_BUCKET}.s3.${env.S3_REGION}.amazonaws.com/${key}`;\n  }\n}\n","size_bytes":1841},"server/utils/idempotency.ts":{"content":"import { Request, Response, NextFunction } from 'express';\n\nconst idempotencyStore = new Map<string, any>();\n\nexport const idempotencyMiddleware = (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  const idempotencyKey = req.headers['idempotency-key'] as string;\n  \n  if (!idempotencyKey) {\n    return next();\n  }\n\n  // Check if we already processed this request\n  const stored = idempotencyStore.get(idempotencyKey);\n  if (stored) {\n    return res.status(stored.status).json(stored.data);\n  }\n\n  // Override res.json to store the response\n  const originalJson = res.json;\n  res.json = function(data: any) {\n    if (res.statusCode >= 200 && res.statusCode < 300) {\n      // Store successful responses for 1 hour\n      idempotencyStore.set(idempotencyKey, {\n        status: res.statusCode,\n        data,\n      });\n\n      // Clean up after 1 hour\n      setTimeout(() => {\n        idempotencyStore.delete(idempotencyKey);\n      }, 60 * 60 * 1000);\n    }\n\n    return originalJson.call(this, data);\n  };\n\n  next();\n};\n","size_bytes":1027},"server/utils/pagination.ts":{"content":"import { Request } from 'express';\n\nexport interface PaginationParams {\n  cursor?: Date;\n  limit: number;\n}\n\nexport interface PaginatedResponse<T> {\n  items: T[];\n  nextCursor?: string;\n  hasMore: boolean;\n}\n\nexport function buildCursorQuery(field: string = 'createdAt', cursor?: string) {\n  if (!cursor) return {};\n  \n  try {\n    const cursorDate = new Date(cursor);\n    return { [field]: { $lt: cursorDate } };\n  } catch {\n    return {};\n  }\n}\n\nexport function getPaginationParams(req: Request): PaginationParams {\n  const cursor = req.query.cursor as string;\n  const limit = Math.min(parseInt(req.query.limit as string) || 20, 100);\n  \n  return {\n    cursor: cursor ? new Date(cursor) : undefined,\n    limit,\n  };\n}\n\nexport function buildPaginatedResponse<T extends { createdAt: Date }>(\n  items: T[],\n  limit: number\n): PaginatedResponse<T> {\n  const hasMore = items.length === limit;\n  const actualItems = hasMore ? items.slice(0, -1) : items;\n  \n  return {\n    items: actualItems,\n    nextCursor: actualItems.length > 0 ? actualItems[actualItems.length - 1].createdAt.toISOString() : undefined,\n    hasMore,\n  };\n}\n","size_bytes":1121},"server/ws/index.ts":{"content":"import { WebSocketServer, WebSocket } from 'ws';\nimport { Server } from 'http';\nimport { AuthService } from '../services/auth.service';\nimport { UserModel } from '../models/User';\nimport { logger } from '../config/logger';\nimport url from 'url';\n\ninterface AuthenticatedWebSocket extends WebSocket {\n  userId?: string;\n  communityIds?: string[];\n}\n\nexport class WebSocketService {\n  private static wss: WebSocketServer;\n  private static clients = new Map<string, AuthenticatedWebSocket>();\n  private static communityRooms = new Map<string, Set<string>>();\n\n  static initialize(server: Server) {\n    this.wss = new WebSocketServer({ \n      server,\n      path: '/ws'\n    });\n\n    this.wss.on('connection', this.handleConnection.bind(this));\n    logger.info('WebSocket server initialized');\n  }\n\n  private static async handleConnection(ws: AuthenticatedWebSocket, req: any) {\n    try {\n      const query = url.parse(req.url, true).query;\n      const token = query.token as string;\n\n      if (!token) {\n        ws.close(1008, 'Authentication required');\n        return;\n      }\n\n      const decoded = AuthService.verifyAccessToken(token);\n      const user = await UserModel.findById(decoded.userId).lean();\n\n      if (!user) {\n        ws.close(1008, 'Invalid user');\n        return;\n      }\n\n      ws.userId = user._id.toString();\n      ws.communityIds = user.communityIds.map((id: any) => id.toString());\n\n      // Store client\n      this.clients.set(ws.userId, ws);\n\n      // Join community rooms\n      for (const communityId of ws.communityIds) {\n        this.joinRoom(ws.userId, `community:${communityId}`);\n      }\n\n      // Join personal room\n      this.joinRoom(ws.userId, `user:${ws.userId}`);\n\n      logger.info(`WebSocket client connected: ${ws.userId}`);\n\n      ws.on('close', () => {\n        this.handleDisconnection(ws);\n      });\n\n      ws.on('message', (data) => {\n        this.handleMessage(ws, data);\n      });\n\n      // Send welcome message\n      this.sendToUser(ws.userId, {\n        type: 'connected',\n        payload: { userId: ws.userId }\n      });\n\n    } catch (error) {\n      logger.error('WebSocket authentication error:', error);\n      ws.close(1008, 'Authentication failed');\n    }\n  }\n\n  private static handleDisconnection(ws: AuthenticatedWebSocket) {\n    if (ws.userId) {\n      this.clients.delete(ws.userId);\n      \n      // Leave all rooms\n      for (const [roomId, users] of this.communityRooms.entries()) {\n        users.delete(ws.userId);\n        if (users.size === 0) {\n          this.communityRooms.delete(roomId);\n        }\n      }\n\n      logger.info(`WebSocket client disconnected: ${ws.userId}`);\n    }\n  }\n\n  private static handleMessage(ws: AuthenticatedWebSocket, data: any) {\n    try {\n      const message = JSON.parse(data.toString());\n      logger.debug('WebSocket message received:', message);\n\n      // Handle different message types\n      switch (message.type) {\n        case 'ping':\n          this.sendToUser(ws.userId!, { type: 'pong', payload: {} });\n          break;\n        default:\n          logger.warn('Unknown WebSocket message type:', message.type);\n      }\n    } catch (error) {\n      logger.error('WebSocket message error:', error);\n    }\n  }\n\n  private static joinRoom(userId: string, roomId: string) {\n    if (!this.communityRooms.has(roomId)) {\n      this.communityRooms.set(roomId, new Set());\n    }\n    this.communityRooms.get(roomId)!.add(userId);\n  }\n\n  static sendToUser(userId: string, message: any) {\n    const client = this.clients.get(userId);\n    if (client && client.readyState === WebSocket.OPEN) {\n      client.send(JSON.stringify(message));\n    }\n  }\n\n  static sendToRoom(roomId: string, message: any, excludeUserId?: string) {\n    const users = this.communityRooms.get(roomId);\n    if (!users) return;\n\n    for (const userId of users) {\n      if (userId !== excludeUserId) {\n        this.sendToUser(userId, message);\n      }\n    }\n  }\n\n  static sendToCommunity(communityId: string, message: any, excludeUserId?: string) {\n    this.sendToRoom(`community:${communityId}`, message, excludeUserId);\n  }\n\n  // Event emitters for business logic\n  static emitPostCreated(post: any) {\n    this.sendToCommunity(post.communityId, {\n      type: 'post.created',\n      payload: post\n    }, post.authorId);\n  }\n\n  static emitCommentCreated(comment: any, postId: string, communityId: string) {\n    this.sendToRoom(`post:${postId}`, {\n      type: 'comment.created',\n      payload: comment\n    }, comment.authorId);\n  }\n\n  static emitPollTally(postId: string, communityId: string, tally: any) {\n    this.sendToCommunity(communityId, {\n      type: 'poll.tally',\n      payload: { postId, tally }\n    });\n  }\n\n  static emitNotification(userId: string, notification: any) {\n    this.sendToUser(userId, {\n      type: 'notification',\n      payload: notification\n    });\n  }\n\n  static emitReportOpened(report: any) {\n    // Send to all moderators and admins\n    for (const [userId, client] of this.clients.entries()) {\n      // This would need to check user roles\n      this.sendToUser(userId, {\n        type: 'report.opened',\n        payload: report\n      });\n    }\n  }\n}\n","size_bytes":5123},"client/src/components/CommentList.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { fr } from \"date-fns/locale\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Form, FormControl, FormField, FormItem, FormMessage } from \"@/components/ui/form\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiClient } from \"@/lib/apiClient\";\nimport { useRealtimeEvent } from \"@/lib/socket\";\nimport { createCommentSchema, CreateCommentData } from \"@/lib/zodSchemas\";\nimport ReportButton from \"./ReportButton\";\n\ninterface CommentListProps {\n  postId: string;\n  isVisible: boolean;\n}\n\ninterface Comment {\n  id: string;\n  body: string;\n  authorId: string;\n  author: {\n    name: string;\n    email: string;\n  };\n  createdAt: string;\n  status: string;\n}\n\nexport default function CommentList({ postId, isVisible }: CommentListProps) {\n  const [isComposing, setIsComposing] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<CreateCommentData>({\n    resolver: zodResolver(createCommentSchema),\n    defaultValues: {\n      body: \"\",\n    },\n  });\n\n  // Fetch comments\n  const { data: commentsData, isLoading } = useQuery({\n    queryKey: [\"/api/posts\", postId, \"comments\"],\n    queryFn: () => apiClient.getPostComments(postId),\n    enabled: isVisible,\n  });\n\n  // Listen for new comments via WebSocket\n  useRealtimeEvent<{ postId: string; comment: Comment }>(\"newComment\", (data) => {\n    if (data.postId === postId) {\n      queryClient.invalidateQueries({ queryKey: [\"/api/posts\", postId, \"comments\"] });\n    }\n  });\n\n  // Create comment mutation\n  const createCommentMutation = useMutation({\n    mutationFn: (data: CreateCommentData) => apiClient.createComment(postId, data.body),\n    onSuccess: () => {\n      form.reset();\n      setIsComposing(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/posts\", postId, \"comments\"] });\n      toast({\n        title: \"Commentaire ajouté\",\n        description: \"Votre commentaire a été publié avec succès.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erreur\",\n        description: error.message || \"Impossible de publier le commentaire\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: CreateCommentData) => {\n    createCommentMutation.mutate(data);\n  };\n\n  const comments = commentsData?.items || [];\n\n  if (!isVisible) return null;\n\n  return (\n    <div className=\"mt-4 pt-4 border-t border-gray-200 dark:border-gray-700\" data-testid=\"comment-list\">\n      {/* Comment Form */}\n      <div className=\"mb-6\">\n        {!isComposing ? (\n          <Button\n            variant=\"outline\"\n            className=\"w-full justify-start text-gray-500\"\n            onClick={() => setIsComposing(true)}\n            data-testid=\"button-start-comment\"\n          >\n            <i className=\"fas fa-comment mr-2\"></i>\n            Ajouter un commentaire...\n          </Button>\n        ) : (\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"body\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Écrivez votre commentaire...\"\n                        className=\"resize-none\"\n                        rows={3}\n                        {...field}\n                        data-testid=\"textarea-comment\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <div className=\"flex justify-end space-x-2\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => {\n                    setIsComposing(false);\n                    form.reset();\n                  }}\n                  data-testid=\"button-cancel-comment\"\n                >\n                  Annuler\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={createCommentMutation.isPending}\n                  data-testid=\"button-submit-comment\"\n                >\n                  {createCommentMutation.isPending ? (\n                    <>\n                      <i className=\"fas fa-spinner animate-spin mr-2\"></i>\n                      Envoi...\n                    </>\n                  ) : (\n                    <>\n                      <i className=\"fas fa-paper-plane mr-2\"></i>\n                      Publier\n                    </>\n                  )}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        )}\n      </div>\n\n      {/* Comments List */}\n      {isLoading ? (\n        <div className=\"space-y-4\">\n          {Array.from({ length: 3 }).map((_, i) => (\n            <div key={i} className=\"flex space-x-3\">\n              <Skeleton className=\"w-8 h-8 rounded-full\" />\n              <div className=\"flex-1\">\n                <Skeleton className=\"h-4 w-24 mb-2\" />\n                <Skeleton className=\"h-16 w-full\" />\n              </div>\n            </div>\n          ))}\n        </div>\n      ) : comments.length > 0 ? (\n        <div className=\"space-y-4\">\n          {comments.map((comment: Comment) => {\n            const authorInitials = comment.author?.name\n              ?.split(' ')\n              .map(n => n[0])\n              .join('')\n              .toUpperCase()\n              .slice(0, 2) || '??';\n\n            const timeAgo = formatDistanceToNow(new Date(comment.createdAt), {\n              addSuffix: true,\n              locale: fr,\n            });\n\n            return (\n              <div key={comment.id} className=\"flex space-x-3\" data-testid={`comment-${comment.id}`}>\n                <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center flex-shrink-0\">\n                  <span className=\"text-white font-medium text-xs\" data-testid=\"text-commenter-initials\">\n                    {authorInitials}\n                  </span>\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"flex items-center justify-between mb-1\">\n                    <div className=\"flex items-center space-x-2\">\n                      <p className=\"text-sm font-medium\" data-testid=\"text-commenter-name\">\n                        {comment.author?.name || 'Utilisateur anonyme'}\n                      </p>\n                      <span className=\"text-xs text-gray-500\" data-testid=\"text-comment-time\">\n                        {timeAgo}\n                      </span>\n                    </div>\n                    <ReportButton targetType=\"comment\" targetId={comment.id} size=\"sm\" />\n                  </div>\n                  <p className=\"text-gray-700 dark:text-gray-300 text-sm leading-relaxed\" data-testid=\"text-comment-body\">\n                    {comment.body}\n                  </p>\n                  <div className=\"flex items-center space-x-4 mt-2\">\n                    <Button variant=\"ghost\" size=\"sm\" className=\"text-xs text-gray-500 hover:text-primary p-0 h-auto\" data-testid=\"button-like-comment\">\n                      <i className=\"fas fa-thumbs-up mr-1\"></i>\n                      J'aime\n                    </Button>\n                    <Button variant=\"ghost\" size=\"sm\" className=\"text-xs text-gray-500 hover:text-primary p-0 h-auto\" data-testid=\"button-reply-comment\">\n                      <i className=\"fas fa-reply mr-1\"></i>\n                      Répondre\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      ) : (\n        <div className=\"text-center py-8\">\n          <i className=\"fas fa-comments text-4xl text-gray-400 mb-4\"></i>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Aucun commentaire pour le moment\n          </p>\n          <p className=\"text-sm text-gray-500 mt-1\">\n            Soyez le premier à commenter !\n          </p>\n        </div>\n      )}\n\n      {/* Load More Comments */}\n      {commentsData?.hasMore && (\n        <div className=\"mt-6 text-center\">\n          <Button variant=\"outline\" size=\"sm\" data-testid=\"button-load-more-comments\">\n            Voir plus de commentaires\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":8732},"client/src/components/Composer.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useComposerStore, useAuthStore } from \"@/lib/store\";\nimport { apiClient } from \"@/lib/apiClient\";\nimport { createPostSchema, CreatePostData } from \"@/lib/zodSchemas\";\nimport Uploader from \"./Uploader\";\n\nconst postTypes = [\n  {\n    id: \"announcement\",\n    label: \"Annonce\",\n    icon: \"fas fa-bullhorn\",\n    color: \"text-red-600 dark:text-red-400\",\n    bgColor: \"bg-red-100 dark:bg-red-900/20\",\n    description: \"Information importante pour la communauté\",\n  },\n  {\n    id: \"service\",\n    label: \"Service\",\n    icon: \"fas fa-handshake\",\n    color: \"text-blue-600 dark:text-blue-400\",\n    bgColor: \"bg-blue-100 dark:bg-blue-900/20\",\n    description: \"Offre ou demande de service\",\n  },\n  {\n    id: \"market\",\n    label: \"Marketplace\",\n    icon: \"fas fa-store\",\n    color: \"text-green-600 dark:text-green-400\",\n    bgColor: \"bg-green-100 dark:bg-green-900/20\",\n    description: \"Vendre ou acheter un objet\",\n  },\n  {\n    id: \"poll\",\n    label: \"Sondage\",\n    icon: \"fas fa-poll\",\n    color: \"text-purple-600 dark:text-purple-400\",\n    bgColor: \"bg-purple-100 dark:bg-purple-900/20\",\n    description: \"Poser une question à la communauté\",\n  },\n];\n\nexport default function Composer() {\n  const { user } = useAuthStore();\n  const {\n    isOpen,\n    type,\n    closeComposer,\n    reset,\n    pollOptions,\n    setPollOptions,\n  } = useComposerStore();\n  \n  const [selectedType, setSelectedType] = useState<CreatePostData[\"type\"]>(type as CreatePostData[\"type\"]);\n  const [uploadedImages, setUploadedImages] = useState<string[]>([]);\n  const [pollOptionInputs, setPollOptionInputs] = useState([\"\", \"\"]);\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<CreatePostData>({\n    resolver: zodResolver(createPostSchema),\n    defaultValues: {\n      type: selectedType,\n      title: \"\",\n      body: \"\",\n      tags: [],\n      meta: {},\n    },\n  });\n\n  // Create post mutation\n  const createPostMutation = useMutation({\n    mutationFn: (data: CreatePostData & { communityId: string }) =>\n      apiClient.createPost(data),\n    onSuccess: () => {\n      toast({\n        title: \"Post créé\",\n        description: \"Votre post a été publié avec succès !\",\n      });\n      handleClose();\n      // Invalidate relevant queries\n      queryClient.invalidateQueries({ \n        queryKey: [\"/api/communities\", user?.communityIds?.[0], \"posts\"] \n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erreur\",\n        description: error.message || \"Impossible de créer le post\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleClose = () => {\n    closeComposer();\n    reset();\n    form.reset();\n    setUploadedImages([]);\n    setPollOptionInputs([\"\", \"\"]);\n    setSelectedType(\"announcement\");\n  };\n\n  const onSubmit = (data: CreatePostData) => {\n    if (!user?.communityIds?.[0]) {\n      toast({\n        title: \"Erreur\",\n        description: \"Vous devez être membre d'une communauté\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Parse tags from comma-separated string\n    const tagsInput = (data as any).tagsInput || \"\";\n    const tags = tagsInput\n      .split(\",\")\n      .map((tag: string) => tag.trim())\n      .filter((tag: string) => tag.length > 0);\n\n    const postData: CreatePostData = {\n      ...data,\n      type: selectedType,\n      tags,\n      meta: {\n        ...(selectedType === \"market\" && {\n          price: data.meta?.price,\n          images: uploadedImages,\n        }),\n        ...(selectedType === \"poll\" && {\n          options: pollOptionInputs.filter(opt => opt.trim().length > 0),\n        }),\n      },\n    };\n\n    createPostMutation.mutate({\n      ...postData,\n      communityId: user.communityIds[0],\n    });\n  };\n\n  const addPollOption = () => {\n    if (pollOptionInputs.length < 6) {\n      setPollOptionInputs([...pollOptionInputs, \"\"]);\n    }\n  };\n\n  const removePollOption = (index: number) => {\n    if (pollOptionInputs.length > 2) {\n      setPollOptionInputs(pollOptionInputs.filter((_, i) => i !== index));\n    }\n  };\n\n  const updatePollOption = (index: number, value: string) => {\n    const newOptions = [...pollOptionInputs];\n    newOptions[index] = value;\n    setPollOptionInputs(newOptions);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-hidden\">\n        <DialogHeader>\n          <DialogTitle>Créer un nouveau post</DialogTitle>\n        </DialogHeader>\n\n        <div className=\"overflow-y-auto max-h-[calc(90vh-140px)]\">\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6 p-1\">\n              {/* Post Type Selection */}\n              <div>\n                <FormLabel className=\"text-base font-medium\">Type de post</FormLabel>\n                <div className=\"grid grid-cols-2 gap-3 mt-3\">\n                  {postTypes.map((postType) => (\n                    <button\n                      key={postType.id}\n                      type=\"button\"\n                      className={`p-4 rounded-lg border-2 text-left transition-colors ${\n                        selectedType === postType.id\n                          ? \"border-primary bg-primary/5\"\n                          : \"border-gray-200 dark:border-gray-700 hover:border-primary/50\"\n                      }`}\n                      onClick={() => {\n                        setSelectedType(postType.id as CreatePostData[\"type\"]);\n                        form.setValue(\"type\", postType.id as CreatePostData[\"type\"]);\n                      }}\n                      data-testid={`post-type-${postType.id}`}\n                    >\n                      <div className={`w-8 h-8 ${postType.bgColor} rounded-lg flex items-center justify-center mb-2`}>\n                        <i className={`${postType.icon} ${postType.color}`}></i>\n                      </div>\n                      <p className=\"font-medium text-sm\">{postType.label}</p>\n                      <p className=\"text-xs text-gray-600 dark:text-gray-400 mt-1\">\n                        {postType.description}\n                      </p>\n                    </button>\n                  ))}\n                </div>\n              </div>\n\n              {/* Title */}\n              <FormField\n                control={form.control}\n                name=\"title\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Titre *</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"Donnez un titre à votre post...\"\n                        {...field}\n                        data-testid=\"input-post-title\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Body */}\n              <FormField\n                control={form.control}\n                name=\"body\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Contenu *</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Écrivez votre message...\"\n                        rows={6}\n                        className=\"resize-none\"\n                        {...field}\n                        data-testid=\"textarea-post-body\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Tags */}\n              <FormField\n                control={form.control}\n                name=\"tagsInput\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Tags</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"Ajoutez des tags séparés par des virgules...\"\n                        {...field}\n                        data-testid=\"input-post-tags\"\n                      />\n                    </FormControl>\n                    <p className=\"text-xs text-gray-500\">\n                      Exemple: travaux, ascenseur, bâtiment-a\n                    </p>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Price field for marketplace */}\n              {selectedType === \"market\" && (\n                <FormField\n                  control={form.control}\n                  name=\"meta.price\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Prix (€)</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          placeholder=\"0\"\n                          min=\"0\"\n                          step=\"0.01\"\n                          {...field}\n                          onChange={(e) => field.onChange(parseFloat(e.target.value) || undefined)}\n                          data-testid=\"input-post-price\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              )}\n\n              {/* Image upload for marketplace */}\n              {selectedType === \"market\" && (\n                <div>\n                  <FormLabel>Images</FormLabel>\n                  <Uploader\n                    onUploadComplete={setUploadedImages}\n                    maxFiles={5}\n                    className=\"mt-2\"\n                  />\n                </div>\n              )}\n\n              {/* Poll options */}\n              {selectedType === \"poll\" && (\n                <div>\n                  <FormLabel>Options du sondage</FormLabel>\n                  <div className=\"space-y-2 mt-2\">\n                    {pollOptionInputs.map((option, index) => (\n                      <div key={index} className=\"flex items-center space-x-2\">\n                        <Input\n                          placeholder={`Option ${index + 1}`}\n                          value={option}\n                          onChange={(e) => updatePollOption(index, e.target.value)}\n                          data-testid={`input-poll-option-${index}`}\n                        />\n                        {pollOptionInputs.length > 2 && (\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => removePollOption(index)}\n                            data-testid={`button-remove-option-${index}`}\n                          >\n                            <i className=\"fas fa-times\"></i>\n                          </Button>\n                        )}\n                      </div>\n                    ))}\n                    {pollOptionInputs.length < 6 && (\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={addPollOption}\n                        data-testid=\"button-add-poll-option\"\n                      >\n                        <i className=\"fas fa-plus mr-2\"></i>\n                        Ajouter une option\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              )}\n            </form>\n          </Form>\n        </div>\n\n        {/* Footer */}\n        <div className=\"flex items-center justify-between pt-4 bg-gray-50 dark:bg-gray-800 border-t border-gray-200 dark:border-gray-600 -mx-6 -mb-6 px-6 py-4\">\n          <div className=\"text-sm text-gray-500 flex items-center\">\n            <i className=\"fas fa-info-circle mr-2\"></i>\n            Votre post sera visible par tous les membres de la communauté\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={handleClose}\n              data-testid=\"button-cancel-post\"\n            >\n              Annuler\n            </Button>\n            <Button\n              onClick={form.handleSubmit(onSubmit)}\n              disabled={createPostMutation.isPending}\n              data-testid=\"button-publish-post\"\n            >\n              {createPostMutation.isPending ? (\n                <>\n                  <i className=\"fas fa-spinner animate-spin mr-2\"></i>\n                  Publication...\n                </>\n              ) : (\n                <>\n                  <i className=\"fas fa-paper-plane mr-2\"></i>\n                  Publier\n                </>\n              )}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":13460},"client/src/components/FilterBar.tsx":{"content":"import { useState } from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { useFilterStore } from \"@/lib/store\";\n\nexport default function FilterBar() {\n  const { activeFilter, searchQuery, setFilter, setSearchQuery } = useFilterStore();\n\n  const filters = [\n    { key: \"all\", label: \"Tous\", active: activeFilter === \"all\" },\n    { key: \"announcement\", label: \"Annonces\", active: activeFilter === \"announcement\" },\n    { key: \"service\", label: \"Services\", active: activeFilter === \"service\" },\n    { key: \"market\", label: \"Marketplace\", active: activeFilter === \"market\" },\n    { key: \"poll\", label: \"Sondages\", active: activeFilter === \"poll\" },\n  ];\n\n  return (\n    <div className=\"mb-6\">\n      <div className=\"flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between\">\n        <div className=\"flex flex-wrap gap-2\">\n          {filters.map((filter) => (\n            <Button\n              key={filter.key}\n              variant={filter.active ? \"default\" : \"outline\"}\n              size=\"sm\"\n              className={`rounded-full ${\n                filter.active \n                  ? \"bg-primary text-white\" \n                  : \"bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600\"\n              }`}\n              onClick={() => setFilter(filter.key)}\n              data-testid={`filter-${filter.key}`}\n            >\n              {filter.label}\n            </Button>\n          ))}\n        </div>\n        \n        <div className=\"relative\">\n          <Input\n            type=\"text\"\n            placeholder=\"Rechercher...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10 pr-4 py-2 w-64\"\n            data-testid=\"input-search\"\n          />\n          <i className=\"fas fa-search absolute left-3 top-3 text-gray-400 text-sm\"></i>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1981},"client/src/components/Layout.tsx":{"content":"import { ReactNode } from \"react\";\nimport NavigationSidebar from \"./NavigationSidebar\";\nimport { useAuthStore } from \"@/lib/store\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"./ThemeProvider\";\nimport NotificationsBell from \"./NotificationsBell\";\n\ninterface LayoutProps {\n  children: ReactNode;\n}\n\nexport default function Layout({ children }: LayoutProps) {\n  const { user } = useAuthStore();\n  const { theme, toggleTheme } = useTheme();\n\n  if (!user) {\n    return <div>{children}</div>;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      <NavigationSidebar />\n      \n      {/* Mobile Header */}\n      <header className=\"lg:hidden fixed top-0 left-0 right-0 z-40 bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 h-16\">\n        <div className=\"flex items-center justify-between px-4 h-full\">\n          <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-menu\">\n            <i className=\"fas fa-bars text-gray-600 dark:text-gray-400\"></i>\n          </Button>\n          <h1 className=\"text-lg font-semibold\">Hub Communautaire</h1>\n          <div className=\"flex items-center space-x-2\">\n            <NotificationsBell />\n            <Button variant=\"ghost\" size=\"sm\" onClick={toggleTheme} data-testid=\"button-theme-toggle\">\n              <i className={`fas ${theme === 'dark' ? 'fa-sun' : 'fa-moon'} text-gray-600 dark:text-gray-400`}></i>\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <div className=\"lg:ml-64\">\n        {children}\n      </div>\n\n      {/* Mobile Bottom Navigation */}\n      <nav className=\"lg:hidden fixed bottom-0 left-0 right-0 bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700 z-40\">\n        <div className=\"flex items-center justify-around py-2\">\n          <Button variant=\"ghost\" className=\"flex flex-col items-center p-2 text-primary\" data-testid=\"button-nav-home\">\n            <i className=\"fas fa-home text-lg\"></i>\n            <span className=\"text-xs mt-1\">Accueil</span>\n          </Button>\n          <Button variant=\"ghost\" className=\"flex flex-col items-center p-2 text-gray-600 dark:text-gray-400\" data-testid=\"button-nav-market\">\n            <i className=\"fas fa-store text-lg\"></i>\n            <span className=\"text-xs mt-1\">Market</span>\n          </Button>\n          <Button className=\"flex flex-col items-center p-2 bg-primary text-white rounded-full -mt-2\" data-testid=\"button-nav-create\">\n            <i className=\"fas fa-plus text-lg\"></i>\n          </Button>\n          <Button variant=\"ghost\" className=\"flex flex-col items-center p-2 text-gray-600 dark:text-gray-400\" data-testid=\"button-nav-polls\">\n            <i className=\"fas fa-poll text-lg\"></i>\n            <span className=\"text-xs mt-1\">Sondages</span>\n          </Button>\n          <Button variant=\"ghost\" className=\"flex flex-col items-center p-2 text-gray-600 dark:text-gray-400\" data-testid=\"button-nav-profile\">\n            <i className=\"fas fa-user text-lg\"></i>\n            <span className=\"text-xs mt-1\">Profil</span>\n          </Button>\n        </div>\n      </nav>\n    </div>\n  );\n}\n","size_bytes":3158},"client/src/components/ModerationPanel.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { fr } from \"date-fns/locale\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiClient } from \"@/lib/apiClient\";\nimport { useRealtimeEvent } from \"@/lib/socket\";\n\ninterface Report {\n  id: string;\n  targetType: \"post\" | \"comment\" | \"user\";\n  targetId: string;\n  reason: string;\n  status: \"open\" | \"closed\";\n  createdAt: string;\n  reporter: {\n    name: string;\n    email: string;\n  };\n}\n\nexport default function ModerationPanel() {\n  const [statusFilter, setStatusFilter] = useState<\"open\" | \"closed\" | \"all\">(\"open\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch reports\n  const { data: reportsData, isLoading } = useQuery({\n    queryKey: [\"/api/moderation/reports\", { status: statusFilter === \"all\" ? undefined : statusFilter }],\n    queryFn: () => apiClient.getModerationReports({ \n      status: statusFilter === \"all\" ? undefined : statusFilter \n    }),\n  });\n\n  // Listen for new reports via WebSocket\n  useRealtimeEvent(\"newReport\", () => {\n    queryClient.invalidateQueries({ queryKey: [\"/api/moderation/reports\"] });\n  });\n\n  // Hide content mutation\n  const hideContentMutation = useMutation({\n    mutationFn: ({ id, targetType }: { id: string; targetType: string }) =>\n      apiClient.hideContent(id, targetType),\n    onSuccess: () => {\n      toast({\n        title: \"Contenu masqué\",\n        description: \"Le contenu a été masqué avec succès.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/moderation/reports\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erreur\",\n        description: error.message || \"Impossible de masquer le contenu\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Resolve report mutation\n  const resolveReportMutation = useMutation({\n    mutationFn: (reportId: string) => apiClient.resolveReport(reportId),\n    onSuccess: () => {\n      toast({\n        title: \"Signalement résolu\",\n        description: \"Le signalement a été marqué comme résolu.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/moderation/reports\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erreur\",\n        description: error.message || \"Impossible de résoudre le signalement\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleHideContent = (report: Report) => {\n    hideContentMutation.mutate({\n      id: report.targetId,\n      targetType: report.targetType,\n    });\n  };\n\n  const handleResolveReport = (reportId: string) => {\n    resolveReportMutation.mutate(reportId);\n  };\n\n  const getReportTypeIcon = (targetType: string) => {\n    switch (targetType) {\n      case \"post\":\n        return \"fas fa-file-alt\";\n      case \"comment\":\n        return \"fas fa-comment\";\n      case \"user\":\n        return \"fas fa-user\";\n      default:\n        return \"fas fa-flag\";\n    }\n  };\n\n  const getReportTypeLabel = (targetType: string) => {\n    switch (targetType) {\n      case \"post\":\n        return \"Post\";\n      case \"comment\":\n        return \"Commentaire\";\n      case \"user\":\n        return \"Utilisateur\";\n      default:\n        return \"Inconnu\";\n    }\n  };\n\n  const reports = reportsData?.items || [];\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"moderation-panel\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">Modération</h2>\n          <p className=\"text-gray-600 dark:text-gray-400 mt-1\">\n            Gérez les signalements et contenus de la communauté\n          </p>\n        </div>\n        \n        <Select value={statusFilter} onValueChange={(value: any) => setStatusFilter(value)}>\n          <SelectTrigger className=\"w-48\" data-testid=\"select-status-filter\">\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"open\">Signalements ouverts</SelectItem>\n            <SelectItem value=\"closed\">Signalements résolus</SelectItem>\n            <SelectItem value=\"all\">Tous les signalements</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      <Tabs defaultValue=\"reports\">\n        <TabsList>\n          <TabsTrigger value=\"reports\" data-testid=\"tab-reports\">\n            Signalements\n          </TabsTrigger>\n          <TabsTrigger value=\"hidden\" data-testid=\"tab-hidden\">\n            Contenu masqué\n          </TabsTrigger>\n          <TabsTrigger value=\"stats\" data-testid=\"tab-stats\">\n            Statistiques\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"reports\" className=\"mt-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Signalements</CardTitle>\n              <CardDescription>\n                {statusFilter === \"open\" && \"Signalements en attente de traitement\"}\n                {statusFilter === \"closed\" && \"Signalements résolus\"}\n                {statusFilter === \"all\" && \"Tous les signalements\"}\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"text-center py-8\">\n                  <i className=\"fas fa-spinner animate-spin text-2xl text-gray-400 mb-2\"></i>\n                  <p>Chargement des signalements...</p>\n                </div>\n              ) : reports.length > 0 ? (\n                <ScrollArea className=\"h-[600px]\">\n                  <div className=\"space-y-4\">\n                    {reports.map((report: Report) => (\n                      <div\n                        key={report.id}\n                        className=\"border border-gray-200 dark:border-gray-700 rounded-lg p-4\"\n                        data-testid={`report-${report.id}`}\n                      >\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex items-start space-x-3\">\n                            <div className=\"w-10 h-10 bg-red-100 dark:bg-red-900/20 rounded-lg flex items-center justify-center\">\n                              <i className={`${getReportTypeIcon(report.targetType)} text-red-600 dark:text-red-400`}></i>\n                            </div>\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center space-x-2 mb-2\">\n                                <Badge variant=\"outline\" data-testid=\"badge-report-type\">\n                                  {getReportTypeLabel(report.targetType)}\n                                </Badge>\n                                <Badge \n                                  variant={report.status === \"open\" ? \"destructive\" : \"secondary\"}\n                                  data-testid=\"badge-report-status\"\n                                >\n                                  {report.status === \"open\" ? \"Ouvert\" : \"Résolu\"}\n                                </Badge>\n                              </div>\n                              \n                              <p className=\"font-medium mb-1\" data-testid=\"text-report-reason\">\n                                {report.reason}\n                              </p>\n                              \n                              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                                Signalé par {report.reporter?.name || \"Utilisateur inconnu\"} •{\" \"}\n                                <span data-testid=\"text-report-time\">\n                                  {formatDistanceToNow(new Date(report.createdAt), {\n                                    addSuffix: true,\n                                    locale: fr,\n                                  })}\n                                </span>\n                              </p>\n                            </div>\n                          </div>\n\n                          {report.status === \"open\" && (\n                            <div className=\"flex items-center space-x-2\">\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => handleHideContent(report)}\n                                disabled={hideContentMutation.isPending}\n                                data-testid={`button-hide-content-${report.id}`}\n                              >\n                                <i className=\"fas fa-eye-slash mr-2\"></i>\n                                Masquer\n                              </Button>\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => handleResolveReport(report.id)}\n                                disabled={resolveReportMutation.isPending}\n                                data-testid={`button-resolve-report-${report.id}`}\n                              >\n                                <i className=\"fas fa-check mr-2\"></i>\n                                Résoudre\n                              </Button>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </ScrollArea>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <i className=\"fas fa-clipboard-check text-4xl text-gray-400 mb-4\"></i>\n                  <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-2\">\n                    {statusFilter === \"open\" ? \"Aucun signalement en attente\" : \"Aucun signalement\"}\n                  </h3>\n                  <p className=\"text-gray-600 dark:text-gray-400\">\n                    {statusFilter === \"open\" \n                      ? \"Votre communauté se porte bien !\" \n                      : \"Aucun signalement trouvé pour ce filtre.\"\n                    }\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"hidden\" className=\"mt-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Contenu masqué</CardTitle>\n              <CardDescription>\n                Posts et commentaires masqués par l'équipe de modération\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-12\">\n                <i className=\"fas fa-eye-slash text-4xl text-gray-400 mb-4\"></i>\n                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-2\">\n                  Fonctionnalité à venir\n                </h3>\n                <p className=\"text-gray-600 dark:text-gray-400\">\n                  La liste du contenu masqué sera bientôt disponible.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"stats\" className=\"mt-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                  Signalements ouverts\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-red-600 dark:text-red-400\">\n                  {reports.filter((r: Report) => r.status === \"open\").length}\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                  Signalements résolus\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-green-600 dark:text-green-400\">\n                  {reports.filter((r: Report) => r.status === \"closed\").length}\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                  Posts signalés\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">\n                  {reports.filter((r: Report) => r.targetType === \"post\").length}\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                  Commentaires signalés\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">\n                  {reports.filter((r: Report) => r.targetType === \"comment\").length}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":13733},"client/src/components/NavigationSidebar.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuthStore } from \"@/lib/store\";\nimport { useTheme } from \"./ThemeProvider\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport default function NavigationSidebar() {\n  const [location] = useLocation();\n  const { user, logout } = useAuthStore();\n  const { theme, toggleTheme } = useTheme();\n  const [isCollapsed, setIsCollapsed] = useState(false);\n\n  if (!user) return null;\n\n  const initials = user.name\n    .split(' ')\n    .map(n => n[0])\n    .join('')\n    .toUpperCase()\n    .slice(0, 2);\n\n  const menuItems = [\n    {\n      icon: \"fas fa-stream\",\n      label: \"Fil d'actualité\",\n      href: \"/\",\n      active: location === \"/\",\n    },\n    {\n      icon: \"fas fa-bullhorn\",\n      label: \"Annonces\",\n      href: \"/announcements\",\n      active: location.startsWith(\"/announcements\"),\n    },\n    {\n      icon: \"fas fa-store\",\n      label: \"Marketplace\",\n      href: \"/marketplace\",\n      active: location.startsWith(\"/marketplace\"),\n      badge: \"12\",\n    },\n    {\n      icon: \"fas fa-poll\",\n      label: \"Sondages\",\n      href: \"/polls\",\n      active: location.startsWith(\"/polls\"),\n    },\n    {\n      icon: \"fas fa-handshake\",\n      label: \"Services\",\n      href: \"/services\",\n      active: location.startsWith(\"/services\"),\n    },\n  ];\n\n  const moderationItems = [\n    {\n      icon: \"fas fa-flag\",\n      label: \"Signalements\",\n      href: \"/moderation/reports\",\n      active: location.startsWith(\"/moderation/reports\"),\n      badge: \"3\",\n      badgeVariant: \"destructive\" as const,\n    },\n    {\n      icon: \"fas fa-eye-slash\",\n      label: \"Contenu masqué\",\n      href: \"/moderation/hidden\",\n      active: location.startsWith(\"/moderation/hidden\"),\n    },\n  ];\n\n  const showModeration = user.roles.includes('moderator') || user.roles.includes('admin');\n\n  return (\n    <div className=\"fixed inset-y-0 left-0 z-50 w-64 bg-white dark:bg-gray-800 shadow-lg transform -translate-x-full lg:translate-x-0 transition-transform duration-300 ease-in-out\">\n      <div className=\"flex items-center justify-between h-16 px-6 border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n            <i className=\"fas fa-home text-white text-sm\"></i>\n          </div>\n          <span className=\"text-lg font-semibold\" data-testid=\"text-app-title\">Hub Communautaire</span>\n        </div>\n        <Button variant=\"ghost\" size=\"sm\" className=\"lg:hidden\" data-testid=\"button-close-sidebar\">\n          <i className=\"fas fa-times text-gray-600 dark:text-gray-400\"></i>\n        </Button>\n      </div>\n\n      <nav className=\"mt-6\">\n        {/* User Profile */}\n        <div className=\"px-6 mb-6\">\n          <div className=\"flex items-center space-x-3 p-3 bg-primary/10 dark:bg-primary/20 rounded-lg\">\n            <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n              <span className=\"text-white font-medium text-sm\" data-testid=\"text-user-initials\">{initials}</span>\n            </div>\n            <div>\n              <p className=\"text-sm font-medium\" data-testid=\"text-community-name\">Quartier Saint-Antoine</p>\n              <p className=\"text-xs text-gray-600 dark:text-gray-400\" data-testid=\"text-user-role\">\n                {user.roles[0] === 'admin' ? 'Administrateur' : \n                 user.roles[0] === 'moderator' ? 'Modérateur' : 'Résident'}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Main Navigation */}\n        <ul className=\"space-y-1 px-3\">\n          {menuItems.map((item) => (\n            <li key={item.href}>\n              <Button\n                variant={item.active ? \"default\" : \"ghost\"}\n                className={`w-full justify-start ${item.active ? 'bg-primary text-white' : 'text-gray-700 dark:text-gray-300'}`}\n                data-testid={`nav-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n              >\n                <i className={`${item.icon} w-5 mr-3`}></i>\n                <span>{item.label}</span>\n                {item.badge && (\n                  <Badge variant=\"secondary\" className=\"ml-auto\">\n                    {item.badge}\n                  </Badge>\n                )}\n              </Button>\n            </li>\n          ))}\n        </ul>\n\n        {/* Moderation Section */}\n        {showModeration && (\n          <div className=\"mt-8 px-3\">\n            <p className=\"px-3 text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider mb-3\">\n              Modération\n            </p>\n            <ul className=\"space-y-1\">\n              {moderationItems.map((item) => (\n                <li key={item.href}>\n                  <Button\n                    variant={item.active ? \"default\" : \"ghost\"}\n                    className={`w-full justify-start ${item.active ? 'bg-primary text-white' : 'text-gray-700 dark:text-gray-300'}`}\n                    data-testid={`mod-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n                  >\n                    <i className={`${item.icon} w-5 mr-3`}></i>\n                    <span>{item.label}</span>\n                    {item.badge && (\n                      <Badge variant={item.badgeVariant || \"secondary\"} className=\"ml-auto\">\n                        {item.badge}\n                      </Badge>\n                    )}\n                  </Button>\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n      </nav>\n\n      {/* User Account Section */}\n      <div className=\"absolute bottom-4 left-3 right-3\">\n        <div className=\"flex items-center justify-between p-3 bg-gray-100 dark:bg-gray-700 rounded-lg\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n              <span className=\"text-white font-medium text-xs\" data-testid=\"text-user-initials-bottom\">{initials}</span>\n            </div>\n            <div>\n              <p className=\"text-sm font-medium\" data-testid=\"text-user-name\">{user.name}</p>\n              <p className=\"text-xs text-gray-600 dark:text-gray-400\">En ligne</p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-1\">\n            <Button variant=\"ghost\" size=\"sm\" onClick={toggleTheme} data-testid=\"button-theme-toggle-sidebar\">\n              <i className={`fas ${theme === 'dark' ? 'fa-sun' : 'fa-moon'} text-gray-600 dark:text-gray-400 text-sm`}></i>\n            </Button>\n            <Button variant=\"ghost\" size=\"sm\" onClick={logout} data-testid=\"button-logout\">\n              <i className=\"fas fa-sign-out-alt text-gray-600 dark:text-gray-400 text-sm\"></i>\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6907},"client/src/components/NotificationsBell.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { apiClient } from \"@/lib/apiClient\";\nimport { useRealtimeEvent } from \"@/lib/socket\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { fr } from \"date-fns/locale\";\n\nexport default function NotificationsBell() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const { data: unreadCount, refetch: refetchCount } = useQuery({\n    queryKey: [\"/api/notifications/unread-count\"],\n    queryFn: () => apiClient.getUnreadCount(),\n  });\n\n  const { data: notifications, refetch: refetchNotifications } = useQuery({\n    queryKey: [\"/api/notifications\"],\n    queryFn: () => apiClient.getNotifications(),\n    enabled: isOpen,\n  });\n\n  // Listen for new notifications via WebSocket\n  useRealtimeEvent(\"newNotification\", () => {\n    refetchCount();\n    if (isOpen) {\n      refetchNotifications();\n    }\n  });\n\n  const handleMarkAsRead = async (id: string) => {\n    try {\n      await apiClient.markNotificationAsRead(id);\n      refetchCount();\n      refetchNotifications();\n    } catch (error) {\n      console.error(\"Failed to mark notification as read:\", error);\n    }\n  };\n\n  const getNotificationIcon = (type: string) => {\n    switch (type) {\n      case \"post.created\":\n        return \"fas fa-file-alt\";\n      case \"comment.created\":\n        return \"fas fa-comment\";\n      case \"poll.tally\":\n        return \"fas fa-poll\";\n      case \"report.opened\":\n        return \"fas fa-flag\";\n      default:\n        return \"fas fa-bell\";\n    }\n  };\n\n  const getNotificationMessage = (notification: any) => {\n    switch (notification.type) {\n      case \"post.created\":\n        return \"Nouveau post dans votre communauté\";\n      case \"comment.created\":\n        return \"Nouveau commentaire sur votre post\";\n      case \"poll.tally\":\n        return \"Nouveau vote sur un sondage\";\n      case \"report.opened\":\n        return \"Nouveau signalement à traiter\";\n      default:\n        return \"Nouvelle notification\";\n    }\n  };\n\n  return (\n    <Popover open={isOpen} onOpenChange={setIsOpen}>\n      <PopoverTrigger asChild>\n        <Button variant=\"ghost\" size=\"sm\" className=\"relative\" data-testid=\"button-notifications\">\n          <i className=\"fas fa-bell text-gray-600 dark:text-gray-400\"></i>\n          {unreadCount?.count > 0 && (\n            <Badge \n              variant=\"destructive\" \n              className=\"absolute -top-1 -right-1 h-5 w-5 text-xs flex items-center justify-center p-0\"\n              data-testid=\"badge-notification-count\"\n            >\n              {unreadCount.count > 9 ? \"9+\" : unreadCount.count}\n            </Badge>\n          )}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-80\" align=\"end\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"font-semibold\">Notifications</h3>\n          {unreadCount?.count > 0 && (\n            <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-mark-all-read\">\n              Tout marquer comme lu\n            </Button>\n          )}\n        </div>\n\n        <ScrollArea className=\"h-96\">\n          {notifications?.length ? (\n            <div className=\"space-y-2\">\n              {notifications.map((notification: any) => (\n                <div\n                  key={notification.id}\n                  className={`p-3 rounded-lg cursor-pointer transition-colors ${\n                    notification.readAt\n                      ? \"bg-gray-50 dark:bg-gray-800\"\n                      : \"bg-blue-50 dark:bg-blue-900/20\"\n                  } hover:bg-gray-100 dark:hover:bg-gray-700`}\n                  onClick={() => !notification.readAt && handleMarkAsRead(notification.id)}\n                  data-testid={`notification-${notification.id}`}\n                >\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center flex-shrink-0\">\n                      <i className={`${getNotificationIcon(notification.type)} text-primary text-sm`}></i>\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"text-sm font-medium\">\n                        {getNotificationMessage(notification)}\n                      </p>\n                      <p className=\"text-xs text-gray-500 mt-1\">\n                        {formatDistanceToNow(new Date(notification.createdAt), {\n                          addSuffix: true,\n                          locale: fr,\n                        })}\n                      </p>\n                    </div>\n                    {!notification.readAt && (\n                      <div className=\"w-2 h-2 bg-primary rounded-full flex-shrink-0\"></div>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-8\">\n              <i className=\"fas fa-bell-slash text-4xl text-gray-400 mb-4\"></i>\n              <p className=\"text-gray-600 dark:text-gray-400\">\n                Aucune notification\n              </p>\n            </div>\n          )}\n        </ScrollArea>\n      </PopoverContent>\n    </Popover>\n  );\n}\n","size_bytes":5488},"client/src/components/PollWidget.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { fr } from \"date-fns/locale\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiClient } from \"@/lib/apiClient\";\nimport { useRealtimeEvent } from \"@/lib/socket\";\nimport { Post } from \"@shared/schema\";\nimport ReportButton from \"./ReportButton\";\n\ninterface PollWidgetProps {\n  post: Post & { \n    author?: { name: string; email: string };\n    commentsCount?: number;\n  };\n  showActions?: boolean;\n}\n\ninterface PollTally {\n  tally: Record<number, number>;\n  totalVotes: number;\n}\n\nexport default function PollWidget({ post, showActions = true }: PollWidgetProps) {\n  const [hasVoted, setHasVoted] = useState(false);\n  const [selectedOption, setSelectedOption] = useState<number | null>(null);\n  const { toast } = useToast();\n\n  const authorInitials = post.author?.name\n    ?.split(' ')\n    .map(n => n[0])\n    .join('')\n    .toUpperCase()\n    .slice(0, 2) || '??';\n\n  const timeAgo = formatDistanceToNow(new Date(post.createdAt), {\n    addSuffix: true,\n    locale: fr,\n  });\n\n  // Get poll tally\n  const { data: pollData, refetch } = useQuery<PollTally>({\n    queryKey: [\"/api/posts\", post.id, \"votes\", \"tally\"],\n    queryFn: () => apiClient.getPollTally(post.id),\n    refetchInterval: hasVoted ? false : 5000, // Stop polling after voting\n  });\n\n  // Vote mutation\n  const voteMutation = useMutation({\n    mutationFn: (optionIndex: number) => apiClient.voteOnPoll(post.id, optionIndex),\n    onSuccess: () => {\n      setHasVoted(true);\n      refetch();\n      toast({\n        title: \"Vote enregistré\",\n        description: \"Votre vote a été pris en compte !\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erreur\",\n        description: error.message || \"Impossible d'enregistrer votre vote\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Listen for real-time poll updates\n  useRealtimeEvent<{ postId: string; tally: Record<number, number> }>(\"pollTally\", (data) => {\n    if (data.postId === post.id) {\n      refetch();\n    }\n  });\n\n  const handleVote = (optionIndex: number) => {\n    if (hasVoted) return;\n    \n    setSelectedOption(optionIndex);\n    voteMutation.mutate(optionIndex);\n  };\n\n  const options = post.meta?.options || [];\n  const tally = pollData?.tally || {};\n  const totalVotes = pollData?.totalVotes || 0;\n\n  // Calculate percentages\n  const getPercentage = (optionIndex: number) => {\n    if (totalVotes === 0) return 0;\n    return Math.round(((tally[optionIndex] || 0) / totalVotes) * 100);\n  };\n\n  const getVoteCount = (optionIndex: number) => {\n    return tally[optionIndex] || 0;\n  };\n\n  // Calculate participation rate (mock data - would need community member count)\n  const participationRate = Math.min(Math.round((totalVotes / 75) * 100), 100); // Assuming 75 community members\n\n  return (\n    <Card className=\"p-6\" data-testid={`poll-widget-${post.id}`}>\n      <div className=\"flex items-start justify-between mb-4\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 bg-accent-500 rounded-full flex items-center justify-center\">\n            <span className=\"text-white font-medium text-sm\" data-testid=\"text-author-initials\">\n              {authorInitials}\n            </span>\n          </div>\n          <div>\n            <p className=\"font-medium\" data-testid=\"text-author-name\">\n              {post.author?.name || 'Conseil Syndical'}\n            </p>\n            <div className=\"flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400\">\n              <span data-testid=\"text-post-time\">{timeAgo}</span>\n              <span>•</span>\n              <Badge className=\"bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400\" data-testid=\"badge-poll\">\n                <i className=\"fas fa-poll mr-1\"></i>\n                Sondage\n              </Badge>\n              {post.expiresAt && (\n                <>\n                  <span>•</span>\n                  <span className=\"text-xs text-accent-600 font-medium\">\n                    Se termine {formatDistanceToNow(new Date(post.expiresAt), { locale: fr })}\n                  </span>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          {showActions && (\n            <>\n              <ReportButton targetType=\"post\" targetId={post.id} />\n              <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-poll-menu\">\n                <i className=\"fas fa-ellipsis-h text-gray-400 text-sm\"></i>\n              </Button>\n            </>\n          )}\n        </div>\n      </div>\n\n      <div className=\"mb-4\">\n        <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-poll-title\">\n          {post.title}\n        </h2>\n        <p className=\"text-gray-700 dark:text-gray-300 leading-relaxed mb-4\" data-testid=\"text-poll-body\">\n          {post.body}\n        </p>\n\n        <div className=\"space-y-3\">\n          {options.map((option, index) => {\n            const percentage = getPercentage(index);\n            const votes = getVoteCount(index);\n            const isSelected = selectedOption === index;\n            const isWinning = totalVotes > 0 && votes === Math.max(...Object.values(tally));\n            \n            return (\n              <div\n                key={index}\n                className={`poll-option cursor-pointer p-3 rounded-lg border transition-colors ${\n                  hasVoted\n                    ? \"cursor-default\"\n                    : \"hover:border-primary-300 dark:hover:border-primary-500\"\n                } ${\n                  isSelected\n                    ? \"border-primary-500 bg-primary-50 dark:bg-primary-900/20\"\n                    : \"border-gray-200 dark:border-gray-600\"\n                }`}\n                onClick={() => !hasVoted && handleVote(index)}\n                data-testid={`poll-option-${index}`}\n              >\n                <div className=\"flex items-center justify-between mb-2\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className={`w-6 h-6 rounded-full border-2 flex items-center justify-center ${\n                      isSelected || hasVoted\n                        ? \"border-primary-400\"\n                        : \"border-gray-300\"\n                    }`}>\n                      <div className={`w-3 h-3 bg-primary rounded-full transition-opacity ${\n                        isSelected ? \"opacity-100\" : \"opacity-0\"\n                      }`}></div>\n                    </div>\n                    <span className={`font-medium ${isWinning && totalVotes > 0 ? 'text-primary' : ''}`} data-testid={`option-text-${index}`}>\n                      {option}\n                    </span>\n                  </div>\n                  {totalVotes > 0 && (\n                    <div className=\"text-right\">\n                      <span className={`text-sm font-medium ${isWinning ? 'text-primary' : ''}`} data-testid={`option-percentage-${index}`}>\n                        {percentage}%\n                      </span>\n                      <p className=\"text-xs text-gray-500\" data-testid={`option-votes-${index}`}>\n                        {votes} vote{votes !== 1 ? 's' : ''}\n                      </p>\n                    </div>\n                  )}\n                </div>\n                {totalVotes > 0 && (\n                  <Progress\n                    value={percentage}\n                    className=\"h-2\"\n                    data-testid={`option-progress-${index}`}\n                  />\n                )}\n              </div>\n            );\n          })}\n        </div>\n\n        {totalVotes > 0 && (\n          <div className=\"mt-4 p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n            <div className=\"flex items-center justify-between text-sm\">\n              <span className=\"text-gray-600 dark:text-gray-400\">Total des votants</span>\n              <span className=\"font-medium\" data-testid=\"text-total-votes\">\n                {totalVotes} résident{totalVotes !== 1 ? 's' : ''}\n              </span>\n            </div>\n            <div className=\"flex items-center justify-between text-sm mt-1\">\n              <span className=\"text-gray-600 dark:text-gray-400\">Participation</span>\n              <span className=\"font-medium text-primary\" data-testid=\"text-participation\">\n                {participationRate}%\n              </span>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {showActions && (\n        <div className=\"flex items-center justify-between pt-4 border-t border-gray-200 dark:border-gray-700\">\n          <div className=\"flex items-center space-x-6\">\n            <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-600 dark:text-gray-400 hover:text-primary\" data-testid=\"button-poll-comments\">\n              <i className=\"fas fa-comment mr-2\"></i>\n              <span data-testid=\"text-comments-count\">{post.commentsCount || 0} commentaires</span>\n            </Button>\n            <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-600 dark:text-gray-400 hover:text-primary\" data-testid=\"button-share-poll\">\n              <i className=\"fas fa-share mr-2\"></i>\n              <span>Partager</span>\n            </Button>\n          </div>\n          {hasVoted && (\n            <div className=\"text-sm text-gray-500 flex items-center\" data-testid=\"text-voted-status\">\n              <i className=\"fas fa-check-circle text-green-500 mr-1\"></i>\n              Vous avez voté\n            </div>\n          )}\n        </div>\n      )}\n    </Card>\n  );\n}\n","size_bytes":9836},"client/src/components/PostCard.tsx":{"content":"import { useState } from \"react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { fr } from \"date-fns/locale\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Post } from \"@shared/schema\";\nimport PollWidget from \"./PollWidget\";\nimport ReportButton from \"./ReportButton\";\n\ninterface PostCardProps {\n  post: Post & { \n    author?: { name: string; email: string };\n    commentsCount?: number;\n    likesCount?: number;\n    userHasLiked?: boolean;\n  };\n  showActions?: boolean;\n}\n\nexport default function PostCard({ post, showActions = true }: PostCardProps) {\n  const [showComments, setShowComments] = useState(false);\n  const [liked, setLiked] = useState(post.userHasLiked || false);\n  const [likesCount, setLikesCount] = useState(post.likesCount || 0);\n\n  const authorInitials = post.author?.name\n    ?.split(' ')\n    .map(n => n[0])\n    .join('')\n    .toUpperCase()\n    .slice(0, 2) || '??';\n\n  const timeAgo = formatDistanceToNow(new Date(post.createdAt), {\n    addSuffix: true,\n    locale: fr,\n  });\n\n  const getTypeConfig = (type: string) => {\n    switch (type) {\n      case 'announcement':\n        return {\n          color: 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400',\n          icon: 'fas fa-bullhorn',\n          label: 'Annonce'\n        };\n      case 'service':\n        return {\n          color: 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400',\n          icon: 'fas fa-handshake',\n          label: 'Service'\n        };\n      case 'market':\n        return {\n          color: 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400',\n          icon: 'fas fa-store',\n          label: post.meta?.price ? 'À vendre' : 'Marketplace'\n        };\n      case 'poll':\n        return {\n          color: 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400',\n          icon: 'fas fa-poll',\n          label: 'Sondage'\n        };\n      default:\n        return {\n          color: 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300',\n          icon: 'fas fa-file-text',\n          label: 'Post'\n        };\n    }\n  };\n\n  const typeConfig = getTypeConfig(post.type);\n\n  const handleLike = () => {\n    setLiked(!liked);\n    setLikesCount(prev => liked ? prev - 1 : prev + 1);\n    // TODO: API call to like/unlike post\n  };\n\n  if (post.type === 'poll') {\n    return <PollWidget post={post} />;\n  }\n\n  return (\n    <Card className=\"p-6\" data-testid={`post-card-${post.id}`}>\n      <div className=\"flex items-start justify-between mb-4\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n            <span className=\"text-white font-medium text-sm\" data-testid=\"text-author-initials\">\n              {authorInitials}\n            </span>\n          </div>\n          <div>\n            <p className=\"font-medium\" data-testid=\"text-author-name\">\n              {post.author?.name || 'Utilisateur anonyme'}\n            </p>\n            <div className=\"flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400\">\n              <span data-testid=\"text-post-time\">{timeAgo}</span>\n              <span>•</span>\n              <Badge className={typeConfig.color} data-testid=\"badge-post-type\">\n                <i className={`${typeConfig.icon} mr-1`}></i>\n                {typeConfig.label}\n              </Badge>\n            </div>\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          {post.meta?.price && (\n            <div className=\"text-right\">\n              <p className=\"text-2xl font-bold text-primary\" data-testid=\"text-price\">\n                {post.meta.price}€\n              </p>\n            </div>\n          )}\n          {showActions && (\n            <>\n              <ReportButton targetType=\"post\" targetId={post.id} />\n              <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-post-menu\">\n                <i className=\"fas fa-ellipsis-h text-gray-400 text-sm\"></i>\n              </Button>\n            </>\n          )}\n        </div>\n      </div>\n\n      <div className=\"mb-4\">\n        <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-post-title\">\n          {post.title}\n        </h2>\n        \n        {/* Display image for marketplace items */}\n        {post.type === 'market' && post.meta?.images && post.meta.images.length > 0 && (\n          <div className=\"mb-3\">\n            <img \n              src={post.meta.images[0]} \n              alt={post.title}\n              className=\"w-full h-48 object-cover rounded-lg\"\n              data-testid=\"img-post-image\"\n            />\n          </div>\n        )}\n        \n        <p className=\"text-gray-700 dark:text-gray-300 leading-relaxed\" data-testid=\"text-post-body\">\n          {post.body}\n        </p>\n        \n        {post.tags && post.tags.length > 0 && (\n          <div className=\"flex flex-wrap gap-2 mt-3\">\n            {post.tags.map((tag, index) => (\n              <Badge \n                key={index} \n                variant=\"secondary\" \n                className=\"text-xs\"\n                data-testid={`tag-${tag}`}\n              >\n                #{tag}\n              </Badge>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {showActions && (\n        <div className=\"flex items-center justify-between pt-4 border-t border-gray-200 dark:border-gray-700\">\n          <div className=\"flex items-center space-x-6\">\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              onClick={handleLike}\n              className={liked ? 'text-primary' : 'text-gray-600 dark:text-gray-400'}\n              data-testid=\"button-like-post\"\n            >\n              <i className={`fas ${liked ? 'fa-heart' : 'fa-heart'} mr-2`}></i>\n              <span data-testid=\"text-likes-count\">{likesCount}</span>\n            </Button>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              onClick={() => setShowComments(!showComments)}\n              className=\"text-gray-600 dark:text-gray-400 hover:text-primary\"\n              data-testid=\"button-toggle-comments\"\n            >\n              <i className=\"fas fa-comment mr-2\"></i>\n              <span data-testid=\"text-comments-count\">{post.commentsCount || 0} commentaires</span>\n            </Button>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              className=\"text-gray-600 dark:text-gray-400 hover:text-primary\"\n              data-testid=\"button-share-post\"\n            >\n              <i className=\"fas fa-share mr-2\"></i>\n              <span>Partager</span>\n            </Button>\n          </div>\n          \n          {post.type === 'market' && (\n            <Button data-testid=\"button-contact-seller\">\n              <i className=\"fas fa-envelope mr-2\"></i>\n              Contacter\n            </Button>\n          )}\n        </div>\n      )}\n\n      {/* Comments section would go here */}\n      {showComments && (\n        <div className=\"mt-4 pt-4 border-t border-gray-200 dark:border-gray-700\">\n          <p className=\"text-gray-500 text-sm\">Chargement des commentaires...</p>\n        </div>\n      )}\n    </Card>\n  );\n}\n","size_bytes":7286},"client/src/components/ReportButton.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiClient } from \"@/lib/apiClient\";\nimport { createReportSchema, CreateReportData } from \"@/lib/zodSchemas\";\n\ninterface ReportButtonProps {\n  targetType: \"post\" | \"comment\" | \"user\";\n  targetId: string;\n  size?: \"sm\" | \"default\" | \"lg\";\n  variant?: \"ghost\" | \"outline\" | \"default\";\n}\n\nconst reportReasons = [\n  { value: \"spam\", label: \"Spam ou contenu indésirable\" },\n  { value: \"inappropriate\", label: \"Contenu inapproprié\" },\n  { value: \"harassment\", label: \"Harcèlement ou intimidation\" },\n  { value: \"false\", label: \"Fausses informations\" },\n  { value: \"violence\", label: \"Violence ou contenu dangereux\" },\n  { value: \"copyright\", label: \"Violation de droits d'auteur\" },\n  { value: \"other\", label: \"Autre\" },\n];\n\nexport default function ReportButton({ targetType, targetId, size = \"sm\", variant = \"ghost\" }: ReportButtonProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<CreateReportData>({\n    resolver: zodResolver(createReportSchema),\n    defaultValues: {\n      targetType,\n      targetId,\n      reason: \"\",\n    },\n  });\n\n  const reportMutation = useMutation({\n    mutationFn: (data: CreateReportData) =>\n      apiClient.createReport(data.targetType, data.targetId, data.reason),\n    onSuccess: () => {\n      toast({\n        title: \"Signalement envoyé\",\n        description: \"Votre signalement a été transmis aux modérateurs.\",\n      });\n      setIsOpen(false);\n      form.reset();\n      \n      // Invalidate reports queries if user has moderation access\n      queryClient.invalidateQueries({ queryKey: [\"/api/moderation/reports\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erreur\",\n        description: error.message || \"Impossible d'envoyer le signalement\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: CreateReportData) => {\n    const customReason = form.watch(\"customReason\");\n    const finalReason = data.reason === \"other\" && customReason ? customReason : \n                       reportReasons.find(r => r.value === data.reason)?.label || data.reason;\n    \n    reportMutation.mutate({\n      ...data,\n      reason: finalReason,\n    });\n  };\n\n  const selectedReason = form.watch(\"reason\");\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogTrigger asChild>\n        <Button variant={variant} size={size} data-testid=\"button-report\">\n          <i className=\"fas fa-flag text-gray-400 text-sm\"></i>\n          {size !== \"sm\" && <span className=\"ml-2\">Signaler</span>}\n        </Button>\n      </DialogTrigger>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>Signaler ce contenu</DialogTitle>\n          <DialogDescription>\n            Aidez-nous à maintenir une communauté sûre en signalant les contenus inappropriés.\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"reason\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Raison du signalement</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-report-reason\">\n                        <SelectValue placeholder=\"Sélectionnez une raison\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {reportReasons.map((reason) => (\n                        <SelectItem key={reason.value} value={reason.value}>\n                          {reason.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {selectedReason === \"other\" && (\n              <FormField\n                control={form.control}\n                name=\"customReason\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Précisez la raison</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Décrivez le problème avec ce contenu...\"\n                        className=\"resize-none\"\n                        {...field}\n                        data-testid=\"textarea-custom-reason\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            )}\n\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsOpen(false)}\n                data-testid=\"button-cancel-report\"\n              >\n                Annuler\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={reportMutation.isPending}\n                data-testid=\"button-submit-report\"\n              >\n                {reportMutation.isPending ? (\n                  <>\n                    <i className=\"fas fa-spinner animate-spin mr-2\"></i>\n                    Envoi...\n                  </>\n                ) : (\n                  <>\n                    <i className=\"fas fa-flag mr-2\"></i>\n                    Signaler\n                  </>\n                )}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":6406},"client/src/components/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState, ReactNode } from \"react\";\n\ntype Theme = \"light\" | \"dark\" | \"system\";\n\ninterface ThemeContextType {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    if (typeof window !== \"undefined\") {\n      return (localStorage.getItem(\"theme\") as Theme) || \"system\";\n    }\n    return \"system\";\n  });\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\";\n      root.classList.add(systemTheme);\n    } else {\n      root.classList.add(theme);\n    }\n\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prev => prev === \"light\" ? \"dark\" : \"light\");\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n};\n","size_bytes":1435},"client/src/components/Uploader.tsx":{"content":"import { useState, useRef, useCallback } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiClient } from \"@/lib/apiClient\";\n\ninterface UploaderProps {\n  onUploadComplete?: (urls: string[]) => void;\n  maxFiles?: number;\n  acceptedTypes?: string[];\n  maxSize?: number; // in bytes\n  className?: string;\n}\n\ninterface UploadedFile {\n  file: File;\n  url?: string;\n  progress: number;\n  error?: string;\n  uploading: boolean;\n}\n\nexport default function Uploader({\n  onUploadComplete,\n  maxFiles = 5,\n  acceptedTypes = [\"image/jpeg\", \"image/png\", \"image/gif\", \"image/webp\"],\n  maxSize = 5 * 1024 * 1024, // 5MB\n  className = \"\",\n}: UploaderProps) {\n  const [files, setFiles] = useState<UploadedFile[]>([]);\n  const [isDragging, setIsDragging] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n\n  // Get signed URL mutation\n  const getSignedUrlMutation = useMutation({\n    mutationFn: ({ filename, contentType }: { filename: string; contentType: string }) =>\n      apiClient.getUploadSignedUrl(contentType, filename),\n  });\n\n  const validateFile = (file: File): string | null => {\n    if (!acceptedTypes.includes(file.type)) {\n      return `Type de fichier non supporté: ${file.type}`;\n    }\n    if (file.size > maxSize) {\n      return `Fichier trop volumineux: ${(file.size / 1024 / 1024).toFixed(1)}MB (max: ${maxSize / 1024 / 1024}MB)`;\n    }\n    return null;\n  };\n\n  const uploadFile = useCallback(async (fileData: UploadedFile, index: number) => {\n    try {\n      // Update file status to uploading\n      setFiles(prev => prev.map((f, i) => \n        i === index ? { ...f, uploading: true, progress: 0 } : f\n      ));\n\n      // Get signed URL\n      const { url, publicUrl } = await getSignedUrlMutation.mutateAsync({\n        filename: fileData.file.name,\n        contentType: fileData.file.type,\n      });\n\n      // Upload file directly to S3\n      const xhr = new XMLHttpRequest();\n      \n      return new Promise<string>((resolve, reject) => {\n        xhr.upload.addEventListener('progress', (e) => {\n          if (e.lengthComputable) {\n            const progress = Math.round((e.loaded / e.total) * 100);\n            setFiles(prev => prev.map((f, i) => \n              i === index ? { ...f, progress } : f\n            ));\n          }\n        });\n\n        xhr.addEventListener('load', () => {\n          if (xhr.status === 200) {\n            setFiles(prev => prev.map((f, i) => \n              i === index ? { ...f, url: publicUrl, uploading: false, progress: 100 } : f\n            ));\n            resolve(publicUrl);\n          } else {\n            reject(new Error(`Upload failed: ${xhr.statusText}`));\n          }\n        });\n\n        xhr.addEventListener('error', () => {\n          reject(new Error('Upload failed'));\n        });\n\n        xhr.open('PUT', url);\n        xhr.setRequestHeader('Content-Type', fileData.file.type);\n        xhr.send(fileData.file);\n      });\n    } catch (error) {\n      setFiles(prev => prev.map((f, i) => \n        i === index ? { \n          ...f, \n          uploading: false, \n          error: error instanceof Error ? error.message : 'Upload failed' \n        } : f\n      ));\n      throw error;\n    }\n  }, [getSignedUrlMutation]);\n\n  const handleFiles = async (selectedFiles: FileList | File[]) => {\n    const fileArray = Array.from(selectedFiles);\n    \n    if (files.length + fileArray.length > maxFiles) {\n      toast({\n        title: \"Trop de fichiers\",\n        description: `Vous ne pouvez télécharger que ${maxFiles} fichiers maximum.`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const newFiles: UploadedFile[] = [];\n    const validFiles: UploadedFile[] = [];\n\n    for (const file of fileArray) {\n      const error = validateFile(file);\n      const uploadedFile: UploadedFile = {\n        file,\n        progress: 0,\n        uploading: false,\n        error,\n      };\n      \n      newFiles.push(uploadedFile);\n      if (!error) {\n        validFiles.push(uploadedFile);\n      }\n    }\n\n    setFiles(prev => [...prev, ...newFiles]);\n\n    // Show errors\n    const errorFiles = newFiles.filter(f => f.error);\n    if (errorFiles.length > 0) {\n      toast({\n        title: \"Erreurs de fichiers\",\n        description: `${errorFiles.length} fichier(s) invalide(s)`,\n        variant: \"destructive\",\n      });\n    }\n\n    // Upload valid files\n    const uploadPromises = validFiles.map(async (fileData, index) => {\n      const fileIndex = files.length + newFiles.indexOf(fileData);\n      try {\n        const url = await uploadFile(fileData, fileIndex);\n        return url;\n      } catch (error) {\n        console.error('Upload error:', error);\n        return null;\n      }\n    });\n\n    try {\n      const urls = await Promise.all(uploadPromises);\n      const successfulUrls = urls.filter(url => url !== null) as string[];\n      \n      if (successfulUrls.length > 0 && onUploadComplete) {\n        const allUrls = files.filter(f => f.url).map(f => f.url!).concat(successfulUrls);\n        onUploadComplete(allUrls);\n      }\n      \n      if (successfulUrls.length > 0) {\n        toast({\n          title: \"Upload terminé\",\n          description: `${successfulUrls.length} fichier(s) téléchargé(s) avec succès.`,\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Erreur d'upload\",\n        description: \"Certains fichiers n'ont pas pu être téléchargés.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(false);\n    \n    if (e.dataTransfer.files) {\n      handleFiles(e.dataTransfer.files);\n    }\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(true);\n  };\n\n  const handleDragLeave = () => {\n    setIsDragging(false);\n  };\n\n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files) {\n      handleFiles(e.target.files);\n    }\n  };\n\n  const removeFile = (index: number) => {\n    const newFiles = files.filter((_, i) => i !== index);\n    setFiles(newFiles);\n    \n    if (onUploadComplete) {\n      const urls = newFiles.filter(f => f.url).map(f => f.url!);\n      onUploadComplete(urls);\n    }\n  };\n\n  const openFileDialog = () => {\n    fileInputRef.current?.click();\n  };\n\n  return (\n    <div className={className}>\n      {/* Upload Area */}\n      <div\n        className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${\n          isDragging\n            ? \"border-primary bg-primary/5\"\n            : \"border-gray-300 dark:border-gray-600 hover:border-primary/50\"\n        }`}\n        onDrop={handleDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        data-testid=\"upload-dropzone\"\n      >\n        <i className=\"fas fa-cloud-upload-alt text-4xl text-gray-400 mb-4\"></i>\n        <p className=\"text-gray-600 dark:text-gray-400 mb-2\">\n          Glissez-déposez vos images ou\n        </p>\n        <Button\n          type=\"button\"\n          onClick={openFileDialog}\n          disabled={files.length >= maxFiles}\n          data-testid=\"button-select-files\"\n        >\n          Choisir des fichiers\n        </Button>\n        <p className=\"text-xs text-gray-500 mt-2\">\n          {acceptedTypes.join(\", \")} jusqu'à {maxSize / 1024 / 1024}MB chacune\n        </p>\n        <p className=\"text-xs text-gray-500\">\n          Maximum {maxFiles} fichiers\n        </p>\n      </div>\n\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        multiple\n        accept={acceptedTypes.join(\",\")}\n        onChange={handleFileSelect}\n        className=\"hidden\"\n        data-testid=\"file-input\"\n      />\n\n      {/* File List */}\n      {files.length > 0 && (\n        <div className=\"mt-4 space-y-3\">\n          {files.map((fileData, index) => (\n            <div\n              key={index}\n              className=\"flex items-center space-x-3 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\"\n              data-testid={`upload-file-${index}`}\n            >\n              <div className=\"w-12 h-12 bg-gray-200 dark:bg-gray-700 rounded flex items-center justify-center flex-shrink-0\">\n                {fileData.url ? (\n                  <img\n                    src={fileData.url}\n                    alt={fileData.file.name}\n                    className=\"w-full h-full object-cover rounded\"\n                  />\n                ) : (\n                  <i className=\"fas fa-file-image text-gray-400\"></i>\n                )}\n              </div>\n              \n              <div className=\"flex-1 min-w-0\">\n                <p className=\"text-sm font-medium truncate\" data-testid={`file-name-${index}`}>\n                  {fileData.file.name}\n                </p>\n                <p className=\"text-xs text-gray-500\">\n                  {(fileData.file.size / 1024).toFixed(1)} KB\n                </p>\n                \n                {fileData.uploading && (\n                  <Progress value={fileData.progress} className=\"h-1 mt-1\" />\n                )}\n                \n                {fileData.error && (\n                  <p className=\"text-xs text-red-600 mt-1\" data-testid={`file-error-${index}`}>\n                    {fileData.error}\n                  </p>\n                )}\n              </div>\n              \n              <div className=\"flex items-center space-x-2\">\n                {fileData.uploading && (\n                  <i className=\"fas fa-spinner animate-spin text-primary\"></i>\n                )}\n                {fileData.url && (\n                  <i className=\"fas fa-check-circle text-green-500\"></i>\n                )}\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => removeFile(index)}\n                  data-testid={`button-remove-file-${index}`}\n                >\n                  <i className=\"fas fa-times text-gray-400\"></i>\n                </Button>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":10159},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/apiClient.ts":{"content":"import { useAuthStore } from \"./store\";\n\nexport class ApiClient {\n  private baseUrl: string;\n\n  constructor(baseUrl: string = \"/api\") {\n    this.baseUrl = baseUrl;\n  }\n\n  private async request<T>(\n    endpoint: string,\n    options: RequestInit = {}\n  ): Promise<T> {\n    const { accessToken } = useAuthStore.getState();\n    \n    const config: RequestInit = {\n      ...options,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...(accessToken && { Authorization: `Bearer ${accessToken}` }),\n        ...options.headers,\n      },\n      credentials: \"include\",\n    };\n\n    const response = await fetch(`${this.baseUrl}${endpoint}`, config);\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      let errorMessage: string;\n      \n      try {\n        const errorJson = JSON.parse(errorText);\n        errorMessage = errorJson.error || errorJson.message || \"Une erreur est survenue\";\n      } catch {\n        errorMessage = errorText || response.statusText;\n      }\n\n      throw new Error(`${response.status}: ${errorMessage}`);\n    }\n\n    const contentType = response.headers.get(\"content-type\");\n    if (contentType && contentType.includes(\"application/json\")) {\n      return response.json();\n    }\n\n    return response.text() as unknown as T;\n  }\n\n  // Auth methods\n  async login(email: string, password: string) {\n    return this.request<{ user: any; accessToken: string }>(\"/auth/login\", {\n      method: \"POST\",\n      body: JSON.stringify({ email, password }),\n    });\n  }\n\n  async register(email: string, password: string, name: string) {\n    return this.request<{ user: any; accessToken: string }>(\"/auth/register\", {\n      method: \"POST\",\n      body: JSON.stringify({ email, password, name }),\n    });\n  }\n\n  async logout() {\n    return this.request(\"/auth/logout\", { method: \"POST\" });\n  }\n\n  async refresh() {\n    return this.request<{ user: any; accessToken: string }>(\"/auth/refresh\", {\n      method: \"POST\",\n    });\n  }\n\n  // Communities\n  async getCommunity(id: string) {\n    return this.request(`/communities/${id}`);\n  }\n\n  // Posts\n  async getCommunityPosts(\n    communityId: string,\n    params: { cursor?: string; limit?: number; type?: string; q?: string; tags?: string } = {}\n  ) {\n    const searchParams = new URLSearchParams();\n    Object.entries(params).forEach(([key, value]) => {\n      if (value !== undefined) searchParams.set(key, value.toString());\n    });\n\n    const query = searchParams.toString();\n    return this.request(`/communities/${communityId}/posts${query ? `?${query}` : \"\"}`);\n  }\n\n  async createPost(postData: {\n    communityId: string;\n    type: string;\n    title: string;\n    body: string;\n    tags?: string[];\n    meta?: any;\n  }) {\n    return this.request(\"/posts\", {\n      method: \"POST\",\n      body: JSON.stringify(postData),\n    });\n  }\n\n  async getPost(id: string) {\n    return this.request(`/posts/${id}`);\n  }\n\n  // Comments\n  async getPostComments(postId: string, params: { cursor?: string; limit?: number } = {}) {\n    const searchParams = new URLSearchParams();\n    Object.entries(params).forEach(([key, value]) => {\n      if (value !== undefined) searchParams.set(key, value.toString());\n    });\n\n    const query = searchParams.toString();\n    return this.request(`/posts/${postId}/comments${query ? `?${query}` : \"\"}`);\n  }\n\n  async createComment(postId: string, body: string) {\n    return this.request(`/posts/${postId}/comments`, {\n      method: \"POST\",\n      body: JSON.stringify({ body }),\n    });\n  }\n\n  // Votes\n  async voteOnPoll(postId: string, optionIndex: number) {\n    return this.request(`/posts/${postId}/votes`, {\n      method: \"POST\",\n      body: JSON.stringify({ optionIndex }),\n    });\n  }\n\n  async getPollTally(postId: string) {\n    return this.request(`/posts/${postId}/votes/tally`);\n  }\n\n  // Reports\n  async createReport(targetType: string, targetId: string, reason: string) {\n    return this.request(\"/reports\", {\n      method: \"POST\",\n      body: JSON.stringify({ targetType, targetId, reason }),\n    });\n  }\n\n  // Moderation\n  async getModerationReports(params: { cursor?: string; limit?: number; status?: string } = {}) {\n    const searchParams = new URLSearchParams();\n    Object.entries(params).forEach(([key, value]) => {\n      if (value !== undefined) searchParams.set(key, value.toString());\n    });\n\n    const query = searchParams.toString();\n    return this.request(`/moderation/reports${query ? `?${query}` : \"\"}`);\n  }\n\n  async hideContent(id: string, targetType: string) {\n    return this.request(`/moderation/${id}/hide`, {\n      method: \"POST\",\n      body: JSON.stringify({ targetType }),\n    });\n  }\n\n  async resolveReport(id: string) {\n    return this.request(`/moderation/reports/${id}/resolve`, {\n      method: \"POST\",\n    });\n  }\n\n  // Uploads\n  async getUploadSignedUrl(contentType: string, filename: string) {\n    return this.request<{ url: string; key: string; publicUrl: string }>(\"/uploads/sign\", {\n      method: \"POST\",\n      body: JSON.stringify({ contentType, filename }),\n    });\n  }\n\n  // Notifications\n  async getNotifications() {\n    return this.request(\"/notifications\");\n  }\n\n  async getUnreadCount() {\n    return this.request<{ count: number }>(\"/notifications/unread-count\");\n  }\n\n  async markNotificationAsRead(id: string) {\n    return this.request(`/notifications/${id}/read`, { method: \"POST\" });\n  }\n}\n\nexport const apiClient = new ApiClient();\n","size_bytes":5399},"client/src/lib/i18n.ts":{"content":"export const translations = {\n  fr: {\n    // Navigation\n    \"nav.feed\": \"Fil d'actualité\",\n    \"nav.announcements\": \"Annonces\",\n    \"nav.marketplace\": \"Marketplace\",\n    \"nav.polls\": \"Sondages\",\n    \"nav.services\": \"Services\",\n    \"nav.moderation\": \"Modération\",\n    \"nav.reports\": \"Signalements\",\n    \"nav.hidden\": \"Contenu masqué\",\n    \"nav.profile\": \"Profil\",\n    \n    // Auth\n    \"auth.login\": \"Se connecter\",\n    \"auth.register\": \"Créer un compte\",\n    \"auth.logout\": \"Se déconnecter\",\n    \"auth.email\": \"Email\",\n    \"auth.password\": \"Mot de passe\",\n    \"auth.name\": \"Nom\",\n    \"auth.welcome\": \"Bienvenue !\",\n    \"auth.loginSuccess\": \"Connexion réussie\",\n    \"auth.loginError\": \"Email ou mot de passe incorrect\",\n    \"auth.registerSuccess\": \"Compte créé avec succès !\",\n    \"auth.registerError\": \"Une erreur est survenue\",\n    \n    // Posts\n    \"post.create\": \"Créer un post\",\n    \"post.title\": \"Titre\",\n    \"post.body\": \"Contenu\",\n    \"post.tags\": \"Tags\",\n    \"post.publish\": \"Publier\",\n    \"post.draft\": \"Brouillon\",\n    \"post.like\": \"J'aime\",\n    \"post.comment\": \"Commenter\",\n    \"post.share\": \"Partager\",\n    \"post.report\": \"Signaler\",\n    \"post.comments\": \"commentaires\",\n    \"post.noComments\": \"Aucun commentaire\",\n    \"post.loadMore\": \"Charger plus\",\n    \n    // Post types\n    \"postType.announcement\": \"Annonce\",\n    \"postType.service\": \"Service\",\n    \"postType.market\": \"À vendre\",\n    \"postType.poll\": \"Sondage\",\n    \n    // Comments\n    \"comment.add\": \"Ajouter un commentaire\",\n    \"comment.reply\": \"Répondre\",\n    \"comment.edit\": \"Modifier\",\n    \"comment.delete\": \"Supprimer\",\n    \"comment.report\": \"Signaler\",\n    \n    // Notifications\n    \"notification.bell\": \"Notifications\",\n    \"notification.markRead\": \"Marquer comme lu\",\n    \"notification.markAllRead\": \"Tout marquer comme lu\",\n    \"notification.empty\": \"Aucune notification\",\n    \n    // Filters\n    \"filter.all\": \"Tous\",\n    \"filter.announcements\": \"Annonces\",\n    \"filter.services\": \"Services\",\n    \"filter.marketplace\": \"Marketplace\",\n    \"filter.polls\": \"Sondages\",\n    \"filter.search\": \"Rechercher...\",\n    \n    // Composer\n    \"composer.title\": \"Créer un nouveau post\",\n    \"composer.selectType\": \"Type de post\",\n    \"composer.titlePlaceholder\": \"Donnez un titre à votre post...\",\n    \"composer.bodyPlaceholder\": \"Écrivez votre message...\",\n    \"composer.tagsPlaceholder\": \"Ajoutez des tags séparés par des virgules...\",\n    \"composer.price\": \"Prix\",\n    \"composer.images\": \"Images\",\n    \"composer.cancel\": \"Annuler\",\n    \"composer.publish\": \"Publier\",\n    \"composer.uploadImages\": \"Glissez-déposez vos images ou\",\n    \"composer.selectFiles\": \"Choisir des fichiers\",\n    \n    // Polls\n    \"poll.vote\": \"Voter\",\n    \"poll.results\": \"Résultats\",\n    \"poll.totalVotes\": \"Total des votants\",\n    \"poll.participation\": \"Participation\",\n    \"poll.hasVoted\": \"Vous avez voté\",\n    \"poll.endingIn\": \"Se termine dans\",\n    \n    // Reports\n    \"report.submit\": \"Signaler\",\n    \"report.reason\": \"Raison du signalement\",\n    \"report.reasonPlaceholder\": \"Pourquoi signalez-vous ce contenu ?\",\n    \"report.reasons.spam\": \"Spam\",\n    \"report.reasons.inappropriate\": \"Contenu inapproprié\",\n    \"report.reasons.harassment\": \"Harcèlement\",\n    \"report.reasons.false\": \"Fausses informations\",\n    \"report.reasons.other\": \"Autre\",\n    \n    // Moderation\n    \"moderation.hide\": \"Masquer\",\n    \"moderation.show\": \"Afficher\",\n    \"moderation.resolve\": \"Résoudre\",\n    \"moderation.pending\": \"En attente\",\n    \"moderation.resolved\": \"Résolu\",\n    \n    // Marketplace\n    \"marketplace.price\": \"Prix\",\n    \"marketplace.contact\": \"Contacter\",\n    \"marketplace.sold\": \"Vendu\",\n    \"marketplace.available\": \"Disponible\",\n    \n    // Common\n    \"common.loading\": \"Chargement...\",\n    \"common.error\": \"Une erreur est survenue\",\n    \"common.save\": \"Enregistrer\",\n    \"common.cancel\": \"Annuler\",\n    \"common.delete\": \"Supprimer\",\n    \"common.edit\": \"Modifier\",\n    \"common.close\": \"Fermer\",\n    \"common.back\": \"Retour\",\n    \"common.next\": \"Suivant\",\n    \"common.previous\": \"Précédent\",\n    \"common.search\": \"Rechercher\",\n    \"common.filter\": \"Filtrer\",\n    \"common.sort\": \"Trier\",\n    \"common.date\": \"Date\",\n    \"common.author\": \"Auteur\",\n    \"common.status\": \"Statut\",\n    \n    // Time\n    \"time.now\": \"maintenant\",\n    \"time.minute\": \"minute\",\n    \"time.minutes\": \"minutes\",\n    \"time.hour\": \"heure\",\n    \"time.hours\": \"heures\",\n    \"time.day\": \"jour\",\n    \"time.days\": \"jours\",\n    \"time.week\": \"semaine\",\n    \"time.weeks\": \"semaines\",\n    \"time.month\": \"mois\",\n    \"time.months\": \"mois\",\n    \"time.year\": \"année\",\n    \"time.years\": \"années\",\n    \"time.ago\": \"il y a\",\n    \n    // Roles\n    \"role.admin\": \"Administrateur\",\n    \"role.moderator\": \"Modérateur\",\n    \"role.resident\": \"Résident\",\n    \n    // Community\n    \"community.stats\": \"Statistiques de la communauté\",\n    \"community.activeResidents\": \"Résidents actifs\",\n    \"community.weeklyPosts\": \"Posts cette semaine\",\n    \"community.activePolls\": \"Sondages actifs\",\n    \"community.quickActions\": \"Actions rapides\",\n    \"community.recentActivity\": \"Activité récente\",\n    \n    // Theme\n    \"theme.light\": \"Thème clair\",\n    \"theme.dark\": \"Thème sombre\",\n    \"theme.system\": \"Système\",\n  },\n  \n  // English translations could be added here\n  en: {\n    // ... English translations\n  }\n} as const;\n\nexport type Language = keyof typeof translations;\nexport type TranslationKey = keyof typeof translations.fr;\n\nlet currentLanguage: Language = \"fr\";\n\nexport function setLanguage(lang: Language) {\n  currentLanguage = lang;\n}\n\nexport function t(key: TranslationKey, params?: Record<string, string | number>): string {\n  let translation = translations[currentLanguage][key] || key;\n  \n  if (params) {\n    Object.entries(params).forEach(([param, value]) => {\n      translation = translation.replace(new RegExp(`{{${param}}}`, 'g'), String(value));\n    });\n  }\n  \n  return translation;\n}\n\nexport function getCurrentLanguage(): Language {\n  return currentLanguage;\n}\n","size_bytes":5999},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/simple-socket.ts":{"content":"// Simplified socket client for development\nexport function initializeSocket(token: string) {\n  console.log('WebSocket initialized with token:', token ? 'present' : 'missing');\n  return null;\n}\n\nexport function disconnectSocket() {\n  console.log('WebSocket disconnected');\n}\n\nexport function getSocket() {\n  return null;\n}\n\nexport function useRealtimeEvent(eventName: string, handler: (data: any) => void) {\n  // Simple hook implementation for development\n}","size_bytes":457},"client/src/lib/simple-store.ts":{"content":"import { create } from \"zustand\";\nimport { persist } from \"zustand/middleware\";\n\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  role: string;\n}\n\ninterface AuthState {\n  user: User | null;\n  accessToken: string | null;\n  isAuthenticated: boolean;\n  setAuth: (user: User, token: string) => void;\n  logout: () => void;\n}\n\nexport const useAuthStore = create<AuthState>()(\n  persist(\n    (set) => ({\n      user: null,\n      accessToken: null,\n      isAuthenticated: false,\n      \n      setAuth: (user, token) =>\n        set({\n          user,\n          accessToken: token,\n          isAuthenticated: true,\n        }),\n      \n      logout: () =>\n        set({\n          user: null,\n          accessToken: null,\n          isAuthenticated: false,\n        }),\n    }),\n    {\n      name: \"auth-storage\",\n    }\n  )\n);\n\nexport const useComposerStore = create(() => ({\n  isOpen: false,\n  type: null,\n  pollOptions: [],\n  openComposer: (type: string) => console.log('Opening composer:', type),\n  closeComposer: () => console.log('Closing composer'),\n  reset: () => console.log('Resetting composer'),\n  setPollOptions: (options: string[]) => console.log('Setting poll options:', options),\n}));\n\nexport const usePostsStore = create(() => ({\n  posts: [],\n  filter: 'all',\n  searchQuery: '',\n  setPosts: (posts: any[]) => console.log('Setting posts:', posts.length),\n  setFilter: (filter: string) => console.log('Setting filter:', filter),\n  setSearchQuery: (query: string) => console.log('Setting search query:', query),\n}));","size_bytes":1525},"client/src/lib/socket.ts":{"content":"import React, { useEffect, useRef, ReactNode } from \"react\";\nimport { io, Socket } from \"socket.io-client\";\nimport { useAuthStore } from \"./store\";\n\nlet socket: Socket | null = null;\n\nexport function getSocket(): Socket | null {\n  return socket;\n}\n\nexport function initializeSocket(token: string) {\n  if (socket?.connected) return socket;\n\n  const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n  const wsUrl = `${protocol}//${window.location.host}/ws`;\n\n  socket = io(wsUrl, {\n    transports: ['websocket'],\n    query: { token },\n    forceNew: true,\n  });\n\n  socket.on('connect', () => {\n    console.log('WebSocket connected');\n  });\n\n  socket.on('disconnect', () => {\n    console.log('WebSocket disconnected');\n  });\n\n  socket.on('error', (error) => {\n    console.error('WebSocket error:', error);\n  });\n\n  // Handle real-time events\n  socket.on('post.created', (data) => {\n    // Emit custom event for components to listen\n    window.dispatchEvent(new CustomEvent('newPost', { detail: data }));\n  });\n\n  socket.on('comment.created', (data) => {\n    window.dispatchEvent(new CustomEvent('newComment', { detail: data }));\n  });\n\n  socket.on('poll.tally', (data) => {\n    window.dispatchEvent(new CustomEvent('pollTally', { detail: data }));\n  });\n\n  socket.on('notification', (data) => {\n    window.dispatchEvent(new CustomEvent('newNotification', { detail: data }));\n  });\n\n  socket.on('report.opened', (data) => {\n    window.dispatchEvent(new CustomEvent('newReport', { detail: data }));\n  });\n\n  return socket;\n}\n\nexport function disconnectSocket() {\n  if (socket) {\n    socket.disconnect();\n    socket = null;\n  }\n}\n\nexport function SocketProvider({ children }: { children: ReactNode }) {\n  const { accessToken, isAuthenticated } = useAuthStore();\n  const socketRef = useRef<Socket | null>(null);\n\n  useEffect(() => {\n    if (isAuthenticated && accessToken) {\n      socketRef.current = initializeSocket(accessToken);\n    } else if (socketRef.current) {\n      disconnectSocket();\n      socketRef.current = null;\n    }\n\n    return () => {\n      if (socketRef.current) {\n        disconnectSocket();\n      }\n    };\n  }, [isAuthenticated, accessToken]);\n\n  return <>{children}</>;\n}\n\n// Custom hooks for real-time events\nexport function useRealtimeEvent<T = any>(\n  eventName: string,\n  handler: (data: T) => void\n) {\n  useEffect(() => {\n    const handleEvent = (event: CustomEvent<T>) => {\n      handler(event.detail);\n    };\n\n    window.addEventListener(eventName as any, handleEvent);\n    return () => window.removeEventListener(eventName as any, handleEvent);\n  }, [eventName, handler]);\n}\n","size_bytes":2614},"client/src/lib/store.ts":{"content":"import React, { ReactNode } from \"react\";\nimport { create } from \"zustand\";\nimport { persist } from \"zustand/middleware\";\nimport { User } from \"@shared/schema\";\n\ninterface AuthState {\n  user: User | null;\n  accessToken: string | null;\n  isAuthenticated: boolean;\n  setAuth: (user: User, token: string) => void;\n  logout: () => void;\n  updateUser: (user: User) => void;\n}\n\nexport const useAuthStore = create<AuthState>()(\n  persist(\n    (set) => ({\n      user: null,\n      accessToken: null,\n      isAuthenticated: false,\n      \n      setAuth: (user, token) =>\n        set({\n          user,\n          accessToken: token,\n          isAuthenticated: true,\n        }),\n      \n      logout: () =>\n        set({\n          user: null,\n          accessToken: null,\n          isAuthenticated: false,\n        }),\n      \n      updateUser: (user) =>\n        set((state) => ({\n          ...state,\n          user,\n        })),\n    }),\n    {\n      name: \"auth-storage\",\n      partialize: (state) => ({\n        user: state.user,\n        accessToken: state.accessToken,\n        isAuthenticated: state.isAuthenticated,\n      }),\n    }\n  )\n);\n\n// Filter state\ninterface FilterState {\n  activeFilter: string;\n  searchQuery: string;\n  setFilter: (filter: string) => void;\n  setSearchQuery: (query: string) => void;\n  clearFilters: () => void;\n}\n\nexport const useFilterStore = create<FilterState>((set) => ({\n  activeFilter: \"all\",\n  searchQuery: \"\",\n  \n  setFilter: (filter) => set({ activeFilter: filter }),\n  setSearchQuery: (query) => set({ searchQuery: query }),\n  clearFilters: () => set({ activeFilter: \"all\", searchQuery: \"\" }),\n}));\n\n// Composer state\ninterface ComposerState {\n  isOpen: boolean;\n  type: \"post\" | \"poll\" | \"market\" | \"announcement\" | \"service\";\n  title: string;\n  body: string;\n  tags: string[];\n  price?: number;\n  images: string[];\n  pollOptions: string[];\n  openComposer: (type?: ComposerState[\"type\"]) => void;\n  closeComposer: () => void;\n  setTitle: (title: string) => void;\n  setBody: (body: string) => void;\n  setTags: (tags: string[]) => void;\n  setPrice: (price: number | undefined) => void;\n  setImages: (images: string[]) => void;\n  setPollOptions: (options: string[]) => void;\n  reset: () => void;\n}\n\nexport const useComposerStore = create<ComposerState>((set) => ({\n  isOpen: false,\n  type: \"post\",\n  title: \"\",\n  body: \"\",\n  tags: [],\n  price: undefined,\n  images: [],\n  pollOptions: [\"\", \"\"],\n  \n  openComposer: (type = \"post\") => set({ isOpen: true, type }),\n  closeComposer: () => set({ isOpen: false }),\n  setTitle: (title) => set({ title }),\n  setBody: (body) => set({ body }),\n  setTags: (tags) => set({ tags }),\n  setPrice: (price) => set({ price }),\n  setImages: (images) => set({ images }),\n  setPollOptions: (options) => set({ pollOptions: options }),\n  \n  reset: () => set({\n    title: \"\",\n    body: \"\",\n    tags: [],\n    price: undefined,\n    images: [],\n    pollOptions: [\"\", \"\"],\n  }),\n}));\n\n// Auth Provider Component\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  return <>{children}</>;\n}\n","size_bytes":3050},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/lib/zodSchemas.ts":{"content":"import { z } from \"zod\";\n\n// Post creation schema\nexport const createPostSchema = z.object({\n  type: z.enum([\"announcement\", \"service\", \"market\", \"poll\"]),\n  title: z.string().min(1, \"Le titre est requis\").max(200, \"Le titre est trop long\"),\n  body: z.string().min(1, \"Le contenu est requis\").max(8000, \"Le contenu est trop long\"),\n  tags: z.array(z.string()).default([]),\n  meta: z.object({\n    price: z.number().positive().optional(),\n    images: z.array(z.string().url()).optional(),\n    options: z.array(z.string()).optional(),\n  }).optional(),\n});\n\nexport type CreatePostData = z.infer<typeof createPostSchema>;\n\n// Comment creation schema\nexport const createCommentSchema = z.object({\n  body: z.string().min(1, \"Le commentaire ne peut pas être vide\").max(2000, \"Le commentaire est trop long\"),\n});\n\nexport type CreateCommentData = z.infer<typeof createCommentSchema>;\n\n// Report creation schema\nexport const createReportSchema = z.object({\n  targetType: z.enum([\"post\", \"comment\", \"user\"]),\n  targetId: z.string().min(1, \"ID de la cible requis\"),\n  reason: z.string().min(1, \"La raison du signalement est requise\"),\n});\n\nexport type CreateReportData = z.infer<typeof createReportSchema>;\n\n// Poll vote schema\nexport const voteSchema = z.object({\n  optionIndex: z.number().min(0, \"Index d'option invalide\"),\n});\n\nexport type VoteData = z.infer<typeof voteSchema>;\n\n// Upload file schema\nexport const uploadFileSchema = z.object({\n  file: z.instanceof(File).refine((file) => file.size <= 5 * 1024 * 1024, \"Le fichier ne peut pas dépasser 5MB\"),\n  contentType: z.string().refine((type) => \n    [\"image/jpeg\", \"image/png\", \"image/gif\", \"image/webp\"].includes(type), \n    \"Type de fichier non supporté\"\n  ),\n});\n\nexport type UploadFileData = z.infer<typeof uploadFileSchema>;\n\n// Filter schema\nexport const filterSchema = z.object({\n  type: z.enum([\"all\", \"announcement\", \"service\", \"market\", \"poll\"]).default(\"all\"),\n  query: z.string().optional(),\n  tags: z.array(z.string()).optional(),\n});\n\nexport type FilterData = z.infer<typeof filterSchema>;\n","size_bytes":2054},"client/src/pages/home.tsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuthStore } from \"@/lib/store\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function Home() {\n  const [, setLocation] = useLocation();\n  const { user, isAuthenticated } = useAuthStore();\n\n  useEffect(() => {\n    if (!isAuthenticated) {\n      setLocation(\"/login\");\n      return;\n    }\n\n    // Redirect to first community if user has communities\n    if (user?.communityIds && user.communityIds.length > 0) {\n      setLocation(`/communities/${user.communityIds[0]}`);\n    }\n  }, [isAuthenticated, user, setLocation]);\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100 mb-4\">\n            Redirection...\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Vous allez être redirigé vers la page de connexion.\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900\">\n      <div className=\"text-center\">\n        <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100 mb-4\">\n          Bienvenue sur Hub Communautaire\n        </h1>\n        <p className=\"text-gray-600 dark:text-gray-400\">\n          Chargement de votre communauté...\n        </p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1533},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\n\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuthStore } from \"@/lib/store\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Email invalide\"),\n  password: z.string().min(6, \"Le mot de passe doit contenir au moins 6 caractères\"),\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const { setAuth } = useAuthStore();\n  const [isRegister, setIsRegister] = useState(false);\n\n  const form = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginForm) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setAuth(data.user, data.accessToken);\n      toast({\n        title: \"Connexion réussie\",\n        description: \"Bienvenue !\",\n      });\n      setLocation(\"/\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erreur de connexion\",\n        description: error.message || \"Email ou mot de passe incorrect\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: LoginForm & { name: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/register\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setAuth(data.user, data.accessToken);\n      toast({\n        title: \"Compte créé\",\n        description: \"Votre compte a été créé avec succès !\",\n      });\n      setLocation(\"/\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erreur de création\",\n        description: error.message || \"Une erreur est survenue\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: LoginForm) => {\n    if (isRegister) {\n      registerMutation.mutate({\n        ...data,\n        name: data.email.split(\"@\")[0], // Simple name extraction\n      });\n    } else {\n      loginMutation.mutate(data);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"w-12 h-12 bg-primary rounded-lg flex items-center justify-center mx-auto mb-4\">\n            <i className=\"fas fa-home text-white text-xl\"></i>\n          </div>\n          <CardTitle className=\"text-2xl font-bold\">\n            {isRegister ? \"Créer un compte\" : \"Se connecter\"}\n          </CardTitle>\n          <CardDescription>\n            {isRegister \n              ? \"Rejoignez votre communauté\" \n              : \"Accédez à votre hub communautaire\"\n            }\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"email\" \n                        placeholder=\"votre@email.com\" \n                        data-testid=\"input-email\"\n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Mot de passe</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"password\" \n                        placeholder=\"••••••••\" \n                        data-testid=\"input-password\"\n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Button \n                type=\"submit\" \n                className=\"w-full\" \n                data-testid=\"button-submit\"\n                disabled={loginMutation.isPending || registerMutation.isPending}\n              >\n                {(loginMutation.isPending || registerMutation.isPending) ? (\n                  <>\n                    <i className=\"fas fa-spinner animate-spin mr-2\"></i>\n                    Chargement...\n                  </>\n                ) : (\n                  isRegister ? \"Créer le compte\" : \"Se connecter\"\n                )}\n              </Button>\n            </form>\n          </Form>\n\n          <div className=\"mt-6 text-center\">\n            <button\n              type=\"button\"\n              className=\"text-sm text-primary hover:underline\"\n              data-testid=\"link-toggle-mode\"\n              onClick={() => setIsRegister(!isRegister)}\n            >\n              {isRegister \n                ? \"Déjà un compte ? Se connecter\" \n                : \"Pas de compte ? S'inscrire\"\n              }\n            </button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":6033},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/simple-home.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\n\nexport default function SimpleHome() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [isLogin, setIsLogin] = useState(true);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        <Card>\n          <CardHeader className=\"space-y-1\">\n            <CardTitle className=\"text-2xl font-bold text-center\">\n              Community Hub\n            </CardTitle>\n            <CardDescription className=\"text-center\">\n              Bienvenue dans votre portail communautaire\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"text-center\">\n              <p className=\"text-gray-600 dark:text-gray-400\">\n                Application en cours de développement\n              </p>\n            </div>\n            \n            <div className=\"flex flex-col space-y-2\">\n              <Button \n                onClick={() => setIsLogin(!isLogin)}\n                variant=\"outline\"\n                className=\"w-full\"\n              >\n                {isLogin ? \"Créer un compte\" : \"Se connecter\"}\n              </Button>\n            </div>\n\n            <div className=\"space-y-4\">\n              {!isLogin && (\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"name\">Nom complet</Label>\n                  <Input\n                    id=\"name\"\n                    type=\"text\"\n                    placeholder=\"Votre nom\"\n                    value={name}\n                    onChange={(e) => setName(e.target.value)}\n                  />\n                </div>\n              )}\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"votre@email.com\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Mot de passe</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  placeholder=\"Votre mot de passe\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                />\n              </div>\n              \n              <Button className=\"w-full\" disabled>\n                {isLogin ? \"Se connecter\" : \"Créer le compte\"}\n              </Button>\n            </div>\n\n            <div className=\"text-center text-sm text-gray-500 dark:text-gray-400\">\n              <p>Version de développement</p>\n              <p>Backend: ✓ Connecté</p>\n              <p>Frontend: En cours...</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":3417},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/community/[id].tsx":{"content":"import { useParams } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuthStore } from \"@/lib/store\";\nimport Layout from \"@/components/Layout\";\nimport PostCard from \"@/components/PostCard\";\nimport FilterBar from \"@/components/FilterBar\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\nexport default function CommunityPage() {\n  const { id } = useParams();\n  const { user } = useAuthStore();\n\n  const { data: community, isLoading: communityLoading } = useQuery({\n    queryKey: [\"/api/communities\", id],\n    enabled: !!id,\n  });\n\n  const { data: posts, isLoading: postsLoading } = useQuery({\n    queryKey: [\"/api/communities\", id, \"posts\"],\n    enabled: !!id,\n  });\n\n  if (communityLoading) {\n    return (\n      <Layout>\n        <div className=\"p-6\">\n          <Skeleton className=\"h-8 w-64 mb-2\" />\n          <Skeleton className=\"h-4 w-48\" />\n        </div>\n      </Layout>\n    );\n  }\n\n  if (!community) {\n    return (\n      <Layout>\n        <div className=\"p-6 text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100 mb-4\">\n            Communauté non trouvée\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Cette communauté n'existe pas ou vous n'y avez pas accès.\n          </p>\n        </div>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout>\n      {/* Header */}\n      <header className=\"hidden lg:flex items-center justify-between p-6 bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700\">\n        <div>\n          <h1 className=\"text-2xl font-bold\" data-testid=\"text-community-name\">\n            {community.name}\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400\" data-testid=\"text-community-address\">\n            {community.address}\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <Button variant=\"outline\" size=\"sm\">\n            <i className=\"fas fa-bell mr-2\"></i>\n            Notifications\n          </Button>\n          <Button data-testid=\"button-new-post\">\n            <i className=\"fas fa-plus mr-2\"></i>\n            Nouveau post\n          </Button>\n        </div>\n      </header>\n\n      <main className=\"p-4 lg:p-6 pt-20 lg:pt-6\">\n        <FilterBar />\n\n        <div className=\"grid grid-cols-1 xl:grid-cols-3 gap-6\">\n          <div className=\"xl:col-span-2 space-y-6\">\n            {postsLoading ? (\n              // Loading skeletons\n              Array.from({ length: 3 }).map((_, i) => (\n                <Card key={i} className=\"p-6\">\n                  <div className=\"flex items-start space-x-3 mb-4\">\n                    <Skeleton className=\"w-10 h-10 rounded-full\" />\n                    <div className=\"flex-1\">\n                      <Skeleton className=\"h-4 w-32 mb-1\" />\n                      <Skeleton className=\"h-3 w-48\" />\n                    </div>\n                  </div>\n                  <Skeleton className=\"h-6 w-3/4 mb-3\" />\n                  <Skeleton className=\"h-20 w-full mb-4\" />\n                  <div className=\"flex space-x-4\">\n                    <Skeleton className=\"h-8 w-16\" />\n                    <Skeleton className=\"h-8 w-24\" />\n                    <Skeleton className=\"h-8 w-20\" />\n                  </div>\n                </Card>\n              ))\n            ) : posts?.items?.length ? (\n              posts.items.map((post: any) => (\n                <PostCard key={post.id} post={post} />\n              ))\n            ) : (\n              <Card className=\"p-12 text-center\">\n                <i className=\"fas fa-stream text-4xl text-gray-400 mb-4\"></i>\n                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-2\">\n                  Aucun post pour le moment\n                </h3>\n                <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n                  Soyez le premier à partager quelque chose dans cette communauté !\n                </p>\n                <Button data-testid=\"button-create-first-post\">\n                  <i className=\"fas fa-plus mr-2\"></i>\n                  Créer le premier post\n                </Button>\n              </Card>\n            )}\n\n            {posts?.hasMore && (\n              <div className=\"flex justify-center mt-8\">\n                <Button variant=\"outline\" data-testid=\"button-load-more\">\n                  Charger plus de posts\n                </Button>\n              </div>\n            )}\n          </div>\n\n          {/* Sidebar */}\n          <aside className=\"hidden xl:block space-y-6\">\n            {/* Community Stats */}\n            <Card className=\"p-6\">\n              <h3 className=\"font-semibold mb-4\">Statistiques de la communauté</h3>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-gray-600 dark:text-gray-400\">Résidents actifs</span>\n                  <span className=\"font-medium\" data-testid=\"text-active-residents\">156</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-gray-600 dark:text-gray-400\">Posts cette semaine</span>\n                  <span className=\"font-medium\" data-testid=\"text-weekly-posts\">23</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-gray-600 dark:text-gray-400\">Sondages actifs</span>\n                  <span className=\"font-medium text-primary\" data-testid=\"text-active-polls\">3</span>\n                </div>\n              </div>\n            </Card>\n\n            {/* Quick Actions */}\n            <Card className=\"p-6\">\n              <h3 className=\"font-semibold mb-4\">Actions rapides</h3>\n              <div className=\"space-y-2\">\n                <Button variant=\"ghost\" className=\"w-full justify-start\" data-testid=\"button-create-announcement\">\n                  <div className=\"w-8 h-8 bg-red-100 dark:bg-red-900/20 rounded-lg flex items-center justify-center mr-3\">\n                    <i className=\"fas fa-bullhorn text-red-600 dark:text-red-400 text-sm\"></i>\n                  </div>\n                  Créer une annonce\n                </Button>\n                <Button variant=\"ghost\" className=\"w-full justify-start\" data-testid=\"button-create-poll\">\n                  <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900/20 rounded-lg flex items-center justify-center mr-3\">\n                    <i className=\"fas fa-poll text-blue-600 dark:text-blue-400 text-sm\"></i>\n                  </div>\n                  Lancer un sondage\n                </Button>\n                <Button variant=\"ghost\" className=\"w-full justify-start\" data-testid=\"button-create-listing\">\n                  <div className=\"w-8 h-8 bg-green-100 dark:bg-green-900/20 rounded-lg flex items-center justify-center mr-3\">\n                    <i className=\"fas fa-store text-green-600 dark:text-green-400 text-sm\"></i>\n                  </div>\n                  Vendre un objet\n                </Button>\n              </div>\n            </Card>\n\n            {/* Recent Activity */}\n            <Card className=\"p-6\">\n              <h3 className=\"font-semibold mb-4\">Activité récente</h3>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center flex-shrink-0\">\n                    <span className=\"text-white font-medium text-xs\">PM</span>\n                  </div>\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"text-sm\">\n                      <span className=\"font-medium\">Pierre Martin</span>\n                      <span className=\"text-gray-600 dark:text-gray-400\"> a commenté sur </span>\n                      <span className=\"font-medium\">\"Travaux d'ascenseur\"</span>\n                    </p>\n                    <p className=\"text-xs text-gray-500\">Il y a 15 min</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-8 h-8 bg-secondary rounded-full flex items-center justify-center flex-shrink-0\">\n                    <span className=\"text-white font-medium text-xs\">SL</span>\n                  </div>\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"text-sm\">\n                      <span className=\"font-medium\">Sophie Lévy</span>\n                      <span className=\"text-gray-600 dark:text-gray-400\"> a voté dans le sondage </span>\n                      <span className=\"font-medium\">\"Couleur cage d'escalier\"</span>\n                    </p>\n                    <p className=\"text-xs text-gray-500\">Il y a 1h</p>\n                  </div>\n                </div>\n              </div>\n            </Card>\n          </aside>\n        </div>\n      </main>\n    </Layout>\n  );\n}\n","size_bytes":9055},"client/src/pages/landing.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { motion } from \"framer-motion\";\n\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuthStore } from \"@/lib/store\";\n\nconst authSchema = z.object({\n  email: z.string().email(\"Email invalide\"),\n  password: z.string().min(6, \"Le mot de passe doit contenir au moins 6 caractères\"),\n  name: z.string().min(2, \"Le nom doit contenir au moins 2 caractères\").optional(),\n});\n\ntype AuthForm = z.infer<typeof authSchema>;\n\nexport default function Landing() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const { setAuth } = useAuthStore();\n  const [isRegister, setIsRegister] = useState(false);\n\n  const form = useForm<AuthForm>({\n    resolver: zodResolver(authSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      name: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: AuthForm) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", {\n        email: data.email,\n        password: data.password,\n      });\n      return response;\n    },\n    onSuccess: (data) => {\n      setAuth(data.user, data.accessToken);\n      toast({\n        title: \"Connexion réussie\",\n        description: \"Bienvenue dans votre communauté !\",\n      });\n      setLocation(\"/\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erreur de connexion\",\n        description: error.message || \"Email ou mot de passe incorrect\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: AuthForm) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/register\", {\n        email: data.email,\n        password: data.password,\n        name: data.name || data.email.split(\"@\")[0],\n      });\n      return response;\n    },\n    onSuccess: (data) => {\n      setAuth(data.user, data.accessToken);\n      toast({\n        title: \"Compte créé avec succès\",\n        description: \"Bienvenue dans votre nouvelle communauté !\",\n      });\n      setLocation(\"/\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erreur de création\",\n        description: error.message || \"Une erreur est survenue lors de la création du compte\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: AuthForm) => {\n    if (isRegister) {\n      registerMutation.mutate(data);\n    } else {\n      loginMutation.mutate(data);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-indigo-50 via-white to-cyan-50 dark:from-gray-900 dark:via-blue-900 dark:to-indigo-900 overflow-hidden\">\n      {/* Animated background elements */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        <div className=\"absolute -top-40 -right-40 w-80 h-80 bg-gradient-to-r from-blue-400 to-purple-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse\"></div>\n        <div className=\"absolute -bottom-40 -left-40 w-80 h-80 bg-gradient-to-r from-green-400 to-blue-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse animation-delay-2000\"></div>\n        <div className=\"absolute top-40 left-40 w-80 h-80 bg-gradient-to-r from-pink-400 to-red-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse animation-delay-4000\"></div>\n      </div>\n\n      <div className=\"relative z-10 flex min-h-screen\">\n        {/* Hero Section */}\n        <div className=\"flex-1 flex flex-col justify-center px-8 lg:px-16 xl:px-24\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"max-w-xl\"\n          >\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.2, type: \"spring\", stiffness: 200 }}\n              className=\"w-20 h-20 bg-gradient-to-r from-blue-500 to-purple-600 rounded-2xl flex items-center justify-center mb-8 shadow-2xl\"\n            >\n              <svg className=\"w-10 h-10 text-white\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path d=\"M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5\"/>\n              </svg>\n            </motion.div>\n            \n            <motion.h1\n              initial={{ opacity: 0, x: -20 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: 0.4, duration: 0.6 }}\n              className=\"text-5xl xl:text-6xl font-bold bg-gradient-to-r from-gray-900 via-blue-800 to-purple-800 dark:from-white dark:via-blue-200 dark:to-purple-200 bg-clip-text text-transparent mb-6\"\n            >\n              Hub Communautaire\n            </motion.h1>\n            \n            <motion.p\n              initial={{ opacity: 0, x: -20 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: 0.6, duration: 0.6 }}\n              className=\"text-xl text-gray-600 dark:text-gray-300 mb-8 leading-relaxed\"\n            >\n              Connectez-vous avec vos voisins, partagez des moments, organisez des événements et créez une vraie communauté dans votre quartier.\n            </motion.p>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.8, duration: 0.6 }}\n              className=\"flex flex-wrap gap-6\"\n            >\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-12 h-12 bg-gradient-to-r from-green-400 to-blue-500 rounded-full flex items-center justify-center\">\n                  <svg className=\"w-6 h-6 text-white\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"/>\n                  </svg>\n                </div>\n                <div>\n                  <p className=\"font-semibold text-gray-800 dark:text-gray-200\">Communauté Active</p>\n                  <p className=\"text-sm text-gray-500 dark:text-gray-400\">Discussions en temps réel</p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-12 h-12 bg-gradient-to-r from-purple-400 to-pink-500 rounded-full flex items-center justify-center\">\n                  <svg className=\"w-6 h-6 text-white\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path d=\"M8 4a4 4 0 100 8 4 4 0 000-8zM6 8a2 2 0 11-4 0 2 2 0 014 0zm4.07 11c.36-.72 1.31-1.24 2.27-1.24 1.8 0 3.25 1.01 3.25 2.25H6c0-1.24 1.45-2.25 3.25-2.25.96 0 1.91.52 2.27 1.24L12 19z\"/>\n                  </svg>\n                </div>\n                <div>\n                  <p className=\"font-semibold text-gray-800 dark:text-gray-200\">Événements</p>\n                  <p className=\"text-sm text-gray-500 dark:text-gray-400\">Organisez et participez</p>\n                </div>\n              </div>\n            </motion.div>\n          </motion.div>\n        </div>\n\n        {/* Auth Form Section */}\n        <div className=\"flex-1 flex items-center justify-center px-8 lg:px-16\">\n          <motion.div\n            initial={{ opacity: 0, scale: 0.8 }}\n            animate={{ opacity: 1, scale: 1 }}\n            transition={{ delay: 0.3, duration: 0.8, type: \"spring\" }}\n            className=\"w-full max-w-md\"\n          >\n            <Card className=\"backdrop-blur-xl bg-white/80 dark:bg-gray-800/80 border border-white/20 shadow-2xl\">\n              <CardHeader className=\"text-center space-y-4\">\n                <motion.div\n                  whileHover={{ scale: 1.1, rotate: 360 }}\n                  transition={{ duration: 0.5 }}\n                  className=\"w-16 h-16 bg-gradient-to-r from-blue-500 to-purple-600 rounded-2xl flex items-center justify-center mx-auto shadow-lg\"\n                >\n                  <svg className=\"w-8 h-8 text-white\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path d=\"M12 2L2 7l10 5 10-5-10-5z\"/>\n                  </svg>\n                </motion.div>\n                <CardTitle className=\"text-2xl font-bold bg-gradient-to-r from-gray-900 to-blue-800 dark:from-white dark:to-blue-200 bg-clip-text text-transparent\">\n                  {isRegister ? \"Rejoignez-nous\" : \"Bon retour\"}\n                </CardTitle>\n                <CardDescription className=\"text-gray-600 dark:text-gray-300\">\n                  {isRegister \n                    ? \"Créez votre compte et découvrez votre communauté\" \n                    : \"Reconnectez-vous avec vos voisins\"\n                  }\n                </CardDescription>\n              </CardHeader>\n              \n              <CardContent className=\"space-y-6\">\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                    {isRegister && (\n                      <FormField\n                        control={form.control}\n                        name=\"name\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-gray-700 dark:text-gray-300\">Nom complet</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"Votre nom complet\" \n                                data-testid=\"input-name\"\n                                className=\"bg-white/50 dark:bg-gray-700/50 border-white/30 focus:border-blue-400 transition-colors\"\n                                {...field} \n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    )}\n\n                    <FormField\n                      control={form.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-gray-700 dark:text-gray-300\">Email</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"email\" \n                              placeholder=\"votre@email.com\" \n                              data-testid=\"input-email\"\n                              className=\"bg-white/50 dark:bg-gray-700/50 border-white/30 focus:border-blue-400 transition-colors\"\n                              {...field} \n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"password\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-gray-700 dark:text-gray-300\">Mot de passe</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"password\" \n                              placeholder=\"••••••••\" \n                              data-testid=\"input-password\"\n                              className=\"bg-white/50 dark:bg-gray-700/50 border-white/30 focus:border-blue-400 transition-colors\"\n                              {...field} \n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white font-semibold py-3 rounded-lg shadow-lg transform transition-all hover:scale-[1.02] hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed\" \n                      data-testid=\"button-submit\"\n                      disabled={loginMutation.isPending || registerMutation.isPending}\n                    >\n                      {(loginMutation.isPending || registerMutation.isPending) ? (\n                        <motion.div\n                          animate={{ rotate: 360 }}\n                          transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n                          className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full mr-2\"\n                        />\n                      ) : null}\n                      {isRegister ? \"Créer mon compte\" : \"Se connecter\"}\n                    </Button>\n                  </form>\n                </Form>\n\n                <div className=\"text-center\">\n                  <button\n                    type=\"button\"\n                    className=\"text-sm font-medium text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300 transition-colors\"\n                    data-testid=\"link-toggle-mode\"\n                    onClick={() => {\n                      setIsRegister(!isRegister);\n                      form.reset();\n                    }}\n                  >\n                    {isRegister \n                      ? \"Déjà membre ? Se connecter\" \n                      : \"Nouveau ici ? Créer un compte\"\n                    }\n                  </button>\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":14070}}}